{"pageProps":{"meta":{"name":"Rocketstyle \\ Attributes","title":"","description":""},"menu":[{"title":"Getting started","slug":"/docs/ui-system/rocketstyle/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/rocketstyle/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/rocketstyle/getting-started#installation"},{"title":"Getting started","anchor":"/docs/ui-system/rocketstyle/getting-started#getting-started"},{"title":"Create your first component","anchor":"/docs/ui-system/rocketstyle/getting-started#create-your-first-component"},{"title":"Reusability","anchor":"/docs/ui-system/rocketstyle/getting-started#reusability"},{"title":"Theming","anchor":"/docs/ui-system/rocketstyle/getting-started#theming"},{"title":"Dark / Light mode","anchor":"/docs/ui-system/rocketstyle/getting-started#dark-/-light-mode"},{"title":"Extend component","anchor":"/docs/ui-system/rocketstyle/getting-started#extend-component"}]},{"title":"Initialization","slug":"/docs/ui-system/rocketstyle/initialization","submenu":[{"title":"Bootstrap your rocket component","anchor":"/docs/ui-system/rocketstyle/initialization#bootstrap-your-rocket-component"},{"title":"Defining styling dimensions","anchor":"/docs/ui-system/rocketstyle/initialization#defining-styling-dimensions"},{"title":"Defining valid CSS styles","anchor":"/docs/ui-system/rocketstyle/initialization#defining-valid-css-styles"}]},{"title":"Context Provider","slug":"/docs/ui-system/rocketstyle/context-provider","submenu":[{"title":"Usage","anchor":"/docs/ui-system/rocketstyle/context-provider#usage"},{"title":"Dark / Light mode","anchor":"/docs/ui-system/rocketstyle/context-provider#dark-/-light-mode"},{"title":"Combined Providers","anchor":"/docs/ui-system/rocketstyle/context-provider#combined-providers"},{"title":"Inversed Mode","anchor":"/docs/ui-system/rocketstyle/context-provider#inversed-mode"},{"title":"Define custom provider","anchor":"/docs/ui-system/rocketstyle/context-provider#define-custom-provider"}]},{"title":"Attributes","slug":"/docs/ui-system/rocketstyle/attributes","submenu":[{"title":"Attrs as a plain object","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-plain-object"},{"title":"Attrs as a callback","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-callback"},{"title":"Prioritized attrs","anchor":"/docs/ui-system/rocketstyle/attributes#prioritized-attrs"},{"title":"Attrs callback params","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-callback-params"}]},{"title":"Theme","slug":"/docs/ui-system/rocketstyle/theme","submenu":[{"title":"Theme as a plain object","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-plain-object"},{"title":"Theme as a callback","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-callback"}]},{"title":"Pseudo State","slug":"/docs/ui-system/rocketstyle/pseudo-state","submenu":[{"title":"Pseudo component properties","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-component-properties"},{"title":"Pseudo via context","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-via-context"},{"title":"Accessing props in styles","anchor":"/docs/ui-system/rocketstyle/pseudo-state#accessing-props-in-styles"}]},{"title":"Compose","slug":"/docs/ui-system/rocketstyle/compose","submenu":[{"title":"An example of using compose","anchor":"/docs/ui-system/rocketstyle/compose#an-example-of-using-compose"}]},{"title":"Dimensions","slug":"/docs/ui-system/rocketstyle/dimensions","submenu":[{"title":"What are dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#what-are-dimensions"},{"title":"Configuration options","anchor":"/docs/ui-system/rocketstyle/dimensions#configuration-options"},{"title":"Define dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#define-dimensions"}]}],"content":{"compiledSource":"var c=Object.defineProperty,m=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var p=(e,o,t)=>o in e?c(e,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[o]=t,n=(e,o)=>{for(var t in o||(o={}))i.call(o,t)&&p(e,t,o[t]);if(l)for(var t of l(o))r.call(o,t)&&p(e,t,o[t]);return e},s=(e,o)=>m(e,h(o));var d=(e,o)=>{var t={};for(var a in e)i.call(e,a)&&o.indexOf(a)<0&&(t[a]=e[a]);if(e!=null&&l)for(var a of l(e))o.indexOf(a)<0&&r.call(e,a)&&(t[a]=e[a]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var a=t,{components:e}=a,o=d(a,[\"components\"]);return mdx(MDXLayout,s(n(n({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Attributes\"),mdx(\"p\",null,`Rocketstyle allows you to define default component props,\nor even allows you to override them later the way you need.\nThere is a callback called `,mdx(\"inlineCode\",{parentName:\"p\"},\"attrs\"),` where all the default props\ncan be defined.`),mdx(\"p\",null,\"For defining default \",mdx(\"inlineCode\",{parentName:\"p\"},\"attrs\"),\" there are two possible choices\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"use plain \",mdx(\"inlineCode\",{parentName:\"li\"},\"object\"),\", or\"),mdx(\"li\",{parentName:\"ol\"},\"use a \",mdx(\"inlineCode\",{parentName:\"li\"},\"callback\"),` which receives props passed directly to\nthe component and offers more configuration options.`)),mdx(\"p\",null,`Attributes are being calculated each time before component render\nbased on props passed directly to your component in the following\nsteps.`),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"pick props passed directly to the component\"),mdx(\"li\",{parentName:\"ol\"},\"calculate predefined \",mdx(\"inlineCode\",{parentName:\"li\"},\"attrs\"),` callbacks to have correct props\nwhen used a callback`),mdx(\"li\",{parentName:\"ol\"},`shallow merged default attrs and props as following\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"{...attrs, ...props}\"),` and passed to the component. Therefore,\nprops passed directly have always the highest priority.`)),mdx(\"h2\",null,\"Attrs as a plain object\"),mdx(\"p\",null,\"Defining default attrs using a \",mdx(\"strong\",{parentName:\"p\"},\"plain object\"),\" looks following:\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\n\nconst Component = RocketComponent.attrs({\n  propA: 'something here',\n  propB: 'something else',\n  disabled: false,\n  // ...etc.\n})\n`)),mdx(\"h2\",null,\"Attrs as a callback\"),mdx(\"p\",null,\"Defining default attrs using a \",mdx(\"strong\",{parentName:\"p\"},\"callback\"),\" looks following:\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\n\nconst Component = RocketComponent.attrs((props, theme, utils) => ({\n  propA: props.disabled ? 'Disabled' : 'Enabled',\n  propB: 'something else',\n  style: {\n    color: theme.color.primary,\n  },\n  // ...etc.\n}))\n`)),mdx(\"p\",null,\"Check section \",mdx(\"a\",n({parentName:\"p\"},{href:\"/docs/ui-system/rocketstyle/attributes#attrs-callback-params\"}),\"Attrs callback params\"),`\nto see more detailed description of arguments.`),mdx(\"h2\",null,\"Prioritized attrs\"),mdx(\"p\",null,\"Rocketstyle allows you to define also \",mdx(\"strong\",{parentName:\"p\"},\"prioritized\"),` default props.\nThese props are calculated `,mdx(\"strong\",{parentName:\"p\"},\"first\"),\" and then passed to normal \",mdx(\"inlineCode\",{parentName:\"p\"},\"attrs\"),`\ncallback props.`),mdx(\"p\",null,`This option allows to define default props, which are being used\nfor calculations of standard default props and passed to component itself.`),mdx(\"p\",null,\"Calculations of final component props are following:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"calculate priority default props\"),mdx(\"li\",{parentName:\"ol\"},\"calculate standard default props\"),mdx(\"li\",{parentName:\"ol\"},\"pass normal props\")),mdx(\"p\",null,`To define priority default props, there is an option to do so as a second argument\nof `,mdx(\"inlineCode\",{parentName:\"p\"},\"attrs\"),\" callback.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`const Component = RocketComponent.attrs(\n  (props, theme) => ({\n    propA: props.disabled ? 'Disabled' : 'Enabled',\n    propB: 'something else',\n    // ...other default props\n  }),\n  // \\u2193\\u2193\\u2193 SET PRIORITY to define prioritized default props calculation \\u2193\\u2193\\u2193\n  { priority: true }\n)\n`)),mdx(\"h2\",null,\"Attrs callback params\"),mdx(\"p\",null,\"Attrs callback can accept up to 3 arguments:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"props passed to the component\"),mdx(\"li\",{parentName:\"ol\"},\"theme\"),mdx(\"li\",{parentName:\"ol\"},\"utils\")),mdx(\"p\",null,\"where \",mdx(\"inlineCode\",{parentName:\"p\"},\"utils\"),\" is bunch of helpers and contains following:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"mode\"),\" - a current theme mode \",mdx(\"inlineCode\",{parentName:\"li\"},\"light\"),\" / \",mdx(\"inlineCode\",{parentName:\"li\"},\"dark\"),\". When \",mdx(\"a\",n({parentName:\"li\"},{href:\"/docs/ui-system/rocketstyle/context-provider\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"Provider\")),`\nis not used, the default value being used is `,mdx(\"inlineCode\",{parentName:\"li\"},\"light\"),\" mode.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"isDark\"),\" - \",mdx(\"inlineCode\",{parentName:\"li\"},\"true\"),\" if \",mdx(\"inlineCode\",{parentName:\"li\"},\"dark\"),\" mode is being used\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"isLight\"),\" - \",mdx(\"inlineCode\",{parentName:\"li\"},\"true\"),\" if \",mdx(\"inlineCode\",{parentName:\"li\"},\"light\"),\" mode is being used\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"inlineCode\",{parentName:\"li\"},\"render\"),` - an utility function to render valid React components.\nThis function combines `,mdx(\"inlineCode\",{parentName:\"li\"},\"createElement\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"cloneElement\"),` (and does an internal\ncheck which one should be used)`)),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\n\n// callback accepts up to 3 arguments\nconst Component = RocketComponent.attrs((props, theme, utils) => ({\n  propA: props.disabled ? 'Disabled' : 'Enabled',\n  propB: 'something else',\n  style: {\n    color: theme.color.primary,\n  },\n  // ...other default props\n}))\n`)),mdx(\"p\",null,\"where \",mdx(\"inlineCode\",{parentName:\"p\"},\"utils\"),\" consist of object with following params:\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\n\nconst Component = RocketComponent.attrs(\n  (props, theme, { mode, isDark, isLight, render }) => ({\n    propA: props.disabled ? 'Disabled' : 'Enabled',\n    propB: 'something else',\n    style: {\n      color: theme.color.primary,\n    },\n    children: render(someComponent, {\n      /* ... some children props */\n    }),\n    // ...other default props\n  })\n)\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}