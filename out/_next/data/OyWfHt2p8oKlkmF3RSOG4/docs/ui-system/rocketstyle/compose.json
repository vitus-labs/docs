{"pageProps":{"meta":{"name":"Rocketstyle \\ Compose","title":"","description":""},"menu":[{"title":"Getting started","slug":"/docs/ui-system/rocketstyle/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/rocketstyle/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/rocketstyle/getting-started#installation"},{"title":"Getting started","anchor":"/docs/ui-system/rocketstyle/getting-started#getting-started"},{"title":"Create your first component","anchor":"/docs/ui-system/rocketstyle/getting-started#create-your-first-component"},{"title":"Reusability","anchor":"/docs/ui-system/rocketstyle/getting-started#reusability"},{"title":"Theming","anchor":"/docs/ui-system/rocketstyle/getting-started#theming"},{"title":"Dark / Light mode","anchor":"/docs/ui-system/rocketstyle/getting-started#dark-/-light-mode"},{"title":"Extend component","anchor":"/docs/ui-system/rocketstyle/getting-started#extend-component"}]},{"title":"Initialization","slug":"/docs/ui-system/rocketstyle/initialization","submenu":[{"title":"Bootstrap your rocket component","anchor":"/docs/ui-system/rocketstyle/initialization#bootstrap-your-rocket-component"},{"title":"Defining styling dimensions","anchor":"/docs/ui-system/rocketstyle/initialization#defining-styling-dimensions"},{"title":"Defining valid CSS styles","anchor":"/docs/ui-system/rocketstyle/initialization#defining-valid-css-styles"}]},{"title":"Context Provider","slug":"/docs/ui-system/rocketstyle/context-provider","submenu":[{"title":"Usage","anchor":"/docs/ui-system/rocketstyle/context-provider#usage"},{"title":"Dark / Light mode","anchor":"/docs/ui-system/rocketstyle/context-provider#dark-/-light-mode"},{"title":"Combined Providers","anchor":"/docs/ui-system/rocketstyle/context-provider#combined-providers"},{"title":"Inversed Mode","anchor":"/docs/ui-system/rocketstyle/context-provider#inversed-mode"},{"title":"Define custom provider","anchor":"/docs/ui-system/rocketstyle/context-provider#define-custom-provider"}]},{"title":"Attributes","slug":"/docs/ui-system/rocketstyle/attributes","submenu":[{"title":"Attrs as a plain object","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-plain-object"},{"title":"Attrs as a callback","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-callback"},{"title":"Prioritized attrs","anchor":"/docs/ui-system/rocketstyle/attributes#prioritized-attrs"},{"title":"Attrs callback params","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-callback-params"}]},{"title":"Theme","slug":"/docs/ui-system/rocketstyle/theme","submenu":[{"title":"Theme as a plain object","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-plain-object"},{"title":"Theme as a callback","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-callback"}]},{"title":"Pseudo State","slug":"/docs/ui-system/rocketstyle/pseudo-state","submenu":[{"title":"Pseudo component properties","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-component-properties"},{"title":"Pseudo via context","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-via-context"},{"title":"Accessing props in styles","anchor":"/docs/ui-system/rocketstyle/pseudo-state#accessing-props-in-styles"}]},{"title":"Compose","slug":"/docs/ui-system/rocketstyle/compose","submenu":[{"title":"An example of using compose","anchor":"/docs/ui-system/rocketstyle/compose#an-example-of-using-compose"}]},{"title":"Dimensions","slug":"/docs/ui-system/rocketstyle/dimensions","submenu":[{"title":"What are dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#what-are-dimensions"},{"title":"Configuration options","anchor":"/docs/ui-system/rocketstyle/dimensions#configuration-options"},{"title":"Define dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#define-dimensions"}]}],"content":{"compiledSource":"var m=Object.defineProperty,d=Object.defineProperties;var C=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(e,o,n)=>o in e?m(e,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[o]=n,a=(e,o)=>{for(var n in o||(o={}))i.call(o,n)&&s(e,n,o[n]);if(p)for(var n of p(o))r.call(o,n)&&s(e,n,o[n]);return e},l=(e,o)=>d(e,C(o));var c=(e,o)=>{var n={};for(var t in e)i.call(e,t)&&o.indexOf(t)<0&&(n[t]=e[t]);if(e!=null&&p)for(var t of p(e))o.indexOf(t)<0&&r.call(e,t)&&(n[t]=e[t]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var t=n,{components:e}=t,o=c(t,[\"components\"]);return mdx(MDXLayout,l(a(a({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Compose\"),mdx(\"p\",null,\"A callback called \",mdx(\"inlineCode\",{parentName:\"p\"},\"compose\"),\" is meant to be used to combine \",mdx(\"strong\",{parentName:\"p\"},\"HOC(s)\"),`\nto wrap rocketstyle component. By default, `,mdx(\"inlineCode\",{parentName:\"p\"},\"rocketstyle\"),` has one\ndefault `,mdx(\"inlineCode\",{parentName:\"p\"},\"HOC\"),\" for calculating default \",mdx(\"inlineCode\",{parentName:\"p\"},\"attrs\"),`. That is because\nthey need to be calculated based on props passed directly to component,\nso you can access final calculated props even in your `,mdx(\"inlineCode\",{parentName:\"p\"},\"HOCs\"),`,\nand access `,mdx(\"strong\",{parentName:\"p\"},\"ref\"),` correctly. Therefore, when you attach any\nown `,mdx(\"inlineCode\",{parentName:\"p\"},\"HOC\"),\" component, it will be added between default \",mdx(\"inlineCode\",{parentName:\"p\"},\"HOC\"),\" for \",mdx(\"inlineCode\",{parentName:\"p\"},\"attrs\"),`\nand `,mdx(\"inlineCode\",{parentName:\"p\"},\"rocketstyle\"),\" component itself.\"),mdx(\"p\",null,\"HOCs can be passed as a \",mdx(\"strong\",{parentName:\"p\"},\"plain object only\"),` under any key name you\nprefer.`),mdx(\"h2\",null,\"An example of using compose\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\nimport someHoc from './someHocPath'\n\nconst Component = RocketComponent.compose({\n  myHoc: someHoc,\n})\n`)),mdx(\"p\",null,`The plain object pattern is being used for one simple reason - having\na possibility to override it in any specific case you need.`),mdx(\"p\",null,\"So now, we have a \",mdx(\"inlineCode\",{parentName:\"p\"},\"rocketstyle\"),` component defined HOC. Now, we can\nadd even more HOCs and compose them together:`),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import anotherHoc from './anotherHocPath'\n\n// component from previous example\nconst NewComponent = Component.compose({\n  yetAnotherHoc: anotherHoc,\n})\n`)),mdx(\"p\",null,\"We can even remove them for some specific cases or override them:\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import anotherHoc from './anotherHocPath'\n\n// component from previous example\nconst NewComponent = Component.compose({\n  myHoc: anotherHoc,\n  yetAnotherHoc: undefined,\n})\n`)),mdx(\"p\",null,\"In the example above, only \",mdx(\"inlineCode\",{parentName:\"p\"},\"myHoc\"),\" will be used and \",mdx(\"inlineCode\",{parentName:\"p\"},\"yetAnotherHoc\"),`\nwill be ignored.`))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}