{"pageProps":{"meta":{"name":"Rocketstyle \\ Context Provider","title":"","description":""},"menu":[{"title":"Getting started","slug":"/docs/ui-system/rocketstyle/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/rocketstyle/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/rocketstyle/getting-started#installation"},{"title":"Getting started","anchor":"/docs/ui-system/rocketstyle/getting-started#getting-started"},{"title":"Create your first component","anchor":"/docs/ui-system/rocketstyle/getting-started#create-your-first-component"},{"title":"Reusability","anchor":"/docs/ui-system/rocketstyle/getting-started#reusability"},{"title":"Theming","anchor":"/docs/ui-system/rocketstyle/getting-started#theming"},{"title":"Dark / Light mode","anchor":"/docs/ui-system/rocketstyle/getting-started#dark-/-light-mode"},{"title":"Extend component","anchor":"/docs/ui-system/rocketstyle/getting-started#extend-component"}]},{"title":"Initialization","slug":"/docs/ui-system/rocketstyle/initialization","submenu":[{"title":"Bootstrap your rocket component","anchor":"/docs/ui-system/rocketstyle/initialization#bootstrap-your-rocket-component"},{"title":"Defining styling dimensions","anchor":"/docs/ui-system/rocketstyle/initialization#defining-styling-dimensions"},{"title":"Defining valid CSS styles","anchor":"/docs/ui-system/rocketstyle/initialization#defining-valid-css-styles"}]},{"title":"Context Provider","slug":"/docs/ui-system/rocketstyle/context-provider","submenu":[{"title":"Usage","anchor":"/docs/ui-system/rocketstyle/context-provider#usage"},{"title":"Dark / Light mode","anchor":"/docs/ui-system/rocketstyle/context-provider#dark-/-light-mode"},{"title":"Combined Providers","anchor":"/docs/ui-system/rocketstyle/context-provider#combined-providers"},{"title":"Inversed Mode","anchor":"/docs/ui-system/rocketstyle/context-provider#inversed-mode"},{"title":"Define custom provider","anchor":"/docs/ui-system/rocketstyle/context-provider#define-custom-provider"}]},{"title":"Attributes","slug":"/docs/ui-system/rocketstyle/attributes","submenu":[{"title":"Attrs as a plain object","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-plain-object"},{"title":"Attrs as a callback","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-callback"},{"title":"Prioritized attrs","anchor":"/docs/ui-system/rocketstyle/attributes#prioritized-attrs"},{"title":"Attrs callback params","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-callback-params"}]},{"title":"Theme","slug":"/docs/ui-system/rocketstyle/theme","submenu":[{"title":"Theme as a plain object","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-plain-object"},{"title":"Theme as a callback","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-callback"}]},{"title":"Pseudo State","slug":"/docs/ui-system/rocketstyle/pseudo-state","submenu":[{"title":"Pseudo component properties","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-component-properties"},{"title":"Pseudo via context","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-via-context"},{"title":"Accessing props in styles","anchor":"/docs/ui-system/rocketstyle/pseudo-state#accessing-props-in-styles"}]},{"title":"Compose","slug":"/docs/ui-system/rocketstyle/compose","submenu":[{"title":"An example of using compose","anchor":"/docs/ui-system/rocketstyle/compose#an-example-of-using-compose"}]},{"title":"Dimensions","slug":"/docs/ui-system/rocketstyle/dimensions","submenu":[{"title":"What are dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#what-are-dimensions"},{"title":"Configuration options","anchor":"/docs/ui-system/rocketstyle/dimensions#configuration-options"},{"title":"Define dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#define-dimensions"}]}],"content":{"compiledSource":"var m=Object.defineProperty,v=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var s=(e,o,r)=>o in e?m(e,o,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[o]=r,t=(e,o)=>{for(var r in o||(o={}))a.call(o,r)&&s(e,r,o[r]);if(n)for(var r of n(o))d.call(o,r)&&s(e,r,o[r]);return e},p=(e,o)=>v(e,h(o));var l=(e,o)=>{var r={};for(var i in e)a.call(e,i)&&o.indexOf(i)<0&&(r[i]=e[i]);if(e!=null&&n)for(var i of n(e))o.indexOf(i)<0&&d.call(e,i)&&(r[i]=e[i]);return r};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var i=r,{components:e}=i,o=l(i,[\"components\"]);return mdx(MDXLayout,p(t(t({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Context Provider\"),mdx(\"p\",null,`Context Provider provides a lot of flexibility building flexible UI\ndesign systems.`),mdx(\"p\",null,\"Rocketstyle Provider integrates also \",mdx(\"inlineCode\",{parentName:\"p\"},\"ThemeProvider\"),\" from \",mdx(\"inlineCode\",{parentName:\"p\"},\"styled-components\"),`\nout of the box.Therefore, there is no need to implement it manually. But\nthat's not all. Let's dive into other options provided by Rocketstyle provider.`),mdx(\"h2\",null,\"Usage\"),mdx(\"p\",null,\"Default usage is following:\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import { Provider } from '@vitus-labs/rocketstyle'\n\nconst theme = {}\n\nconst App = () => <Provider theme={theme}>{/* components here */}</Provider>\n`)),mdx(\"h2\",null,\"Dark / Light mode\"),mdx(\"p\",null,\"Via Provider can be also defined what mode your app works in (\",mdx(\"inlineCode\",{parentName:\"p\"},\"light\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"dark\"),\").\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import { Provider } from '@vitus-labs/rocketstyle'\n\nconst theme = {}\n\n// app UI works in dark mode\nconst App = () => (\n  <Provider theme={theme} mode=\"dark\">\n    {/* components here */}\n  </Provider>\n)\n`)),mdx(\"h2\",null,\"Combined Providers\"),mdx(\"p\",null,\"Provider can be used also inside other \",mdx(\"inlineCode\",{parentName:\"p\"},\"Providers\"),`. This way provides\nan ability to use different UI modes for different parts of the app\nor to pass different themes.`),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import { Provider } from '@vitus-labs/rocketstyle'\n\nconst theme = {}\n\n// whole app UI works in dark mode\nconst App = () => (\n  <Provider theme={theme} mode=\"dark\">\n    <div>hello world</div>\n    <Provider mode=\"light\">\n      {/* components here, this part of the app will be in light mode */}\n    </Provider>\n  </Provider>\n)\n`)),mdx(\"h2\",null,\"Inversed Mode\"),mdx(\"p\",null,`In the example above is described, how can be statically changed UI mode.\nTo have make it working dynamically without need to define\nany business logic, prop `,mdx(\"inlineCode\",{parentName:\"p\"},\"inversed\"),\" is the way to go.\"),mdx(\"p\",null,\"This prop has an effect only if a \",mdx(\"inlineCode\",{parentName:\"p\"},\"mode\"),\" is defined in any parent \",mdx(\"inlineCode\",{parentName:\"p\"},\"Provider\"),`,\notherwise is being ignored.`),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import { Provider } from '@vitus-labs/rocketstyle'\n\nconst theme = {}\n\n// whole app UI works in dark mode\nconst App = () => (\n  <Provider theme={theme} mode=\"dark\">\n    <div>hello world</div>\n    <Provider inversed>\n      {/* components here, this part of the app will be in light mode */}\n    </Provider>\n  </Provider>\n)\n`)),mdx(\"h2\",null,\"Define custom provider\"),mdx(\"p\",null,\"Provider also accepts prop \",mdx(\"inlineCode\",{parentName:\"p\"},\"provider\"),` to have an ability to pass\nyour custom `,mdx(\"a\",t({parentName:\"p\"},{href:\"https://react.dev/reference/react/createContext#provider\"}),\"provider\"),\".\"),mdx(\"p\",null,`By defining custom Provider, you must take into account, that you need to implement\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"ThemeProvider\"),\" from \",mdx(\"inlineCode\",{parentName:\"p\"},\"styled-components\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"VitusLabsProvider\"),` manually, because\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"VitusLabsProvider\"),\" is set as the default value of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"provider\"),\" prop.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import { Provider } from '@vitus-labs/rocketstyle'\nimport { Provider as VitusLabsProvider } from '@vitus-labs/core'\nimport { ThemeProvider } from 'styled-components'\nimport CustomProvider from './path-to-custom-provider'\n\nconst theme = {}\n\n// whole app UI works in dark mode\nconst App = () => (\n  <Provider provider={CustomProvider} theme={theme} mode=\"dark\">\n    <VitusLabsProvider theme={theme}>\n      <ThemeProvider theme={theme}>{/* components here */}</ThemeProvider>\n    </VitusLabsProvider>\n  </Provider>\n)\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}