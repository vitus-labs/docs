{"pageProps":{"meta":{"name":"Rocketstyle \\ Initialization","title":"","description":""},"menu":[{"title":"Getting started","slug":"/docs/ui-system/rocketstyle/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/rocketstyle/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/rocketstyle/getting-started#installation"},{"title":"Getting started","anchor":"/docs/ui-system/rocketstyle/getting-started#getting-started"},{"title":"Create your first component","anchor":"/docs/ui-system/rocketstyle/getting-started#create-your-first-component"},{"title":"Reusability","anchor":"/docs/ui-system/rocketstyle/getting-started#reusability"},{"title":"Theming","anchor":"/docs/ui-system/rocketstyle/getting-started#theming"},{"title":"Dark / Light mode","anchor":"/docs/ui-system/rocketstyle/getting-started#dark-/-light-mode"},{"title":"Extend component","anchor":"/docs/ui-system/rocketstyle/getting-started#extend-component"}]},{"title":"Initialization","slug":"/docs/ui-system/rocketstyle/initialization","submenu":[{"title":"Bootstrap your rocket component","anchor":"/docs/ui-system/rocketstyle/initialization#bootstrap-your-rocket-component"},{"title":"Defining styling dimensions","anchor":"/docs/ui-system/rocketstyle/initialization#defining-styling-dimensions"},{"title":"Defining valid CSS styles","anchor":"/docs/ui-system/rocketstyle/initialization#defining-valid-css-styles"}]},{"title":"Context Provider","slug":"/docs/ui-system/rocketstyle/context-provider","submenu":[{"title":"Usage","anchor":"/docs/ui-system/rocketstyle/context-provider#usage"},{"title":"Dark / Light mode","anchor":"/docs/ui-system/rocketstyle/context-provider#dark-/-light-mode"},{"title":"Combined Providers","anchor":"/docs/ui-system/rocketstyle/context-provider#combined-providers"},{"title":"Inversed Mode","anchor":"/docs/ui-system/rocketstyle/context-provider#inversed-mode"},{"title":"Define custom provider","anchor":"/docs/ui-system/rocketstyle/context-provider#define-custom-provider"}]},{"title":"Attributes","slug":"/docs/ui-system/rocketstyle/attributes","submenu":[{"title":"Attrs as a plain object","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-plain-object"},{"title":"Attrs as a callback","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-callback"},{"title":"Prioritized attrs","anchor":"/docs/ui-system/rocketstyle/attributes#prioritized-attrs"},{"title":"Attrs callback params","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-callback-params"}]},{"title":"Theme","slug":"/docs/ui-system/rocketstyle/theme","submenu":[{"title":"Theme as a plain object","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-plain-object"},{"title":"Theme as a callback","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-callback"}]},{"title":"Pseudo State","slug":"/docs/ui-system/rocketstyle/pseudo-state","submenu":[{"title":"Pseudo component properties","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-component-properties"},{"title":"Pseudo via context","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-via-context"},{"title":"Accessing props in styles","anchor":"/docs/ui-system/rocketstyle/pseudo-state#accessing-props-in-styles"}]},{"title":"Compose","slug":"/docs/ui-system/rocketstyle/compose","submenu":[{"title":"An example of using compose","anchor":"/docs/ui-system/rocketstyle/compose#an-example-of-using-compose"}]},{"title":"Dimensions","slug":"/docs/ui-system/rocketstyle/dimensions","submenu":[{"title":"What are dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#what-are-dimensions"},{"title":"Configuration options","anchor":"/docs/ui-system/rocketstyle/dimensions#configuration-options"},{"title":"Define dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#define-dimensions"}]}],"content":{"compiledSource":"var c=Object.defineProperty,y=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var l=(e,t,o)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,s=(e,t)=>{for(var o in t||(t={}))a.call(t,o)&&l(e,o,t[o]);if(i)for(var o of i(t))r.call(t,o)&&l(e,o,t[o]);return e},p=(e,t)=>y(e,d(t));var m=(e,t)=>{var o={};for(var n in e)a.call(e,n)&&t.indexOf(n)<0&&(o[n]=e[n]);if(e!=null&&i)for(var n of i(e))t.indexOf(n)<0&&r.call(e,n)&&(o[n]=e[n]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var n=o,{components:e}=n,t=m(n,[\"components\"]);return mdx(MDXLayout,p(s(s({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Initialization\"),mdx(\"p\",null,\"Let's start with component initialization to start building UI components.\"),mdx(\"h2\",null,\"Bootstrap your rocket component\"),mdx(\"p\",null,\"First of all, you need to initialize \",mdx(\"inlineCode\",{parentName:\"p\"},\"rocketstyle\"),` and\npass a default `,mdx(\"inlineCode\",{parentName:\"p\"},\"component\"),` as an argument. Optionally,\nyou can define component `,mdx(\"inlineCode\",{parentName:\"p\"},\"name\"),\" for better debugging.\"),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import { rocketstyle } from '@vitus-labs/rocketstyle'\nimport MyDefaultComponent from './somewhere'\n\n/*\n  rocketstyle call allows you define styling dimensions\n  the way you like, the example below uses default\n  ones (see sections below)\n*/\nconst MyComponent = rocketstyle()({\n  component: MyDefaultComponent,\n  name: '@myUiSystem/MyComponent',\n})\n`)),mdx(\"p\",null,\"Now you are ready to start building your components.\"),mdx(\"p\",null,\"As \",mdx(\"inlineCode\",{parentName:\"p\"},\"Rocketstyles\"),` tries to provide as much freedom as possible,\nit's definitely up to you how you configure it.`),mdx(\"h2\",null,\"Defining styling dimensions\"),mdx(\"p\",null,`Firs of all, you can set up dimensions you would like to use\nfor defining styles and its priorities.`),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import { rocketstyle } from '@vitus-labs/rocketstyle'\nimport MyDefaultComponent from './somewhere'\n\nconst MyComponent = rocketstyle({\n  dimensions: {\n    states: 'state',\n    sizes: 'size',\n    variants: 'variant',\n    multiple: {\n      propName: 'multiple',\n      multi: true,\n    },\n  },\n  useBooleans: true,\n})({\n  component: MyDefaultComponent,\n  name: '@myUiSystem/MyComponent',\n})\n`)),mdx(\"p\",null,\"For more detailed explanation of \",mdx(\"strong\",{parentName:\"p\"},\"dimensions\"),` configuration follow chapter\n`,mdx(\"a\",s({parentName:\"p\"},{href:\"/docs/ui-system/rocketstyle/dimensions\"}),\"Dimensions\"),\".\"),mdx(\"h2\",null,\"Defining valid CSS styles\"),mdx(\"p\",null,\"Rocketstyle has no default \",mdx(\"inlineCode\",{parentName:\"p\"},\"css\"),` valid properties. Everything\nis completely up to you how you would like to define and use it.`),mdx(\"p\",null,\"What basically \",mdx(\"strong\",{parentName:\"p\"},\"rocketstyle\"),` does, it merges defined themes\nin your component and pass them as an object under `,mdx(\"inlineCode\",{parentName:\"p\"},\"$rocketstyle\"),` prop\nto your `,mdx(\"inlineCode\",{parentName:\"p\"},\"styled\"),` component. How you define the final output is completely\nup to you.`),mdx(\"p\",null,\"For some useful best practices you can use \",mdx(\"a\",s({parentName:\"p\"},{href:\"/docs/ui-system/unistyle/styles#styles\"}),\"styles\"),`\nand/or `,mdx(\"a\",s({parentName:\"p\"},{href:\"http://localhost:3000/docs/ui-system/unistyle/responsive#make-it-responsive\"}),\"makeItResponsive\"),`\nhelper from `,mdx(\"a\",s({parentName:\"p\"},{href:\"/docs/ui-system/unistyle\"}),\"Unistyle\"),` package so you don't\nhave to configure everything from scratch. See the implementation on\n`,mdx(\"a\",s({parentName:\"p\"},{href:\"https://github.com/vitus-labs/docs/blob/master/src/components/core/element.ts\"}),\"GitHub repository\"),`\nof this documentation website.`),mdx(\"p\",null,\"Below is an example of trivial configuration:\"),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import { rocketstyle } from '@vitus-labs/rocketstyle'\nimport MyDefaultComponent from './somewhere'\n\nconst MyComponent = rocketstyle()({\n  component: MyDefaultComponent,\n  name: '@myUiSystem/MyComponent',\n}).styles(\n  (css) => css\\`\n    \\${({ $rocketstyle: t, $rocketstate: s }) => css\\`\n      text-align: \\${t.textAlign};\n      line-height: \\${t.lineHeight};\n      color: \\${t.color};\n\n      /* default browser hover event styles */\n      &:hover {\n        color: \\${t.hover.color};\n      }\n\n      /* styles when hover prop is passed to rocket component */\n      \\${s.hover &&\n      css\\`\n        color: \\${t.hover.color};\n      \\`}\n    \\`};\n  \\`\n)\n`)),mdx(\"p\",null,`From the configuration above we can see what kind of defined styles\ncan be accepted and used as `,mdx(\"inlineCode\",{parentName:\"p\"},\"JSON\"),\" keys/values within \",mdx(\"inlineCode\",{parentName:\"p\"},\"theme\"),\" callbacks.\"),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`// reused component from previous example\nconst AnotherComponent = MyComponent.theme({\n  textAlign: 'center',\n  lineHeight: 1.5,\n  color: '#000',\n  hover: {\n    color: '#fff',\n  },\n  // other theme values will be ignored as they are not transformed\n  // to valid css styles in the styles configuration above\n})\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}