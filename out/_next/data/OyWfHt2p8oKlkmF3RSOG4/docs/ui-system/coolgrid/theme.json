{"pageProps":{"meta":{"name":"Theme","title":"","description":""},"menu":[{"title":"Getting Started","slug":"/docs/ui-system/coolgrid/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/coolgrid/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/coolgrid/getting-started#installation"},{"title":"Dependencies","anchor":"/docs/ui-system/coolgrid/getting-started#dependencies"},{"title":"Responsivity","anchor":"/docs/ui-system/coolgrid/getting-started#responsivity"},{"title":"Code examples","anchor":"/docs/ui-system/coolgrid/getting-started#code-examples"}]},{"title":"Container","slug":"/docs/ui-system/coolgrid/container","submenu":[{"title":"Usage example","anchor":"/docs/ui-system/coolgrid/container#usage-example"},{"title":"Overriding defaults","anchor":"/docs/ui-system/coolgrid/container#overriding-defaults"},{"title":"Properties","anchor":"/docs/ui-system/coolgrid/container#properties"},{"title":"Using props example","anchor":"/docs/ui-system/coolgrid/container#using-props-example"},{"title":"Responsive object type props","anchor":"/docs/ui-system/coolgrid/container#responsive-object-type-props"},{"title":"Responsive array type props","anchor":"/docs/ui-system/coolgrid/container#responsive-array-type-props"},{"title":"Props passed via Context","anchor":"/docs/ui-system/coolgrid/container#props-passed-via-context"}]},{"title":"Row","slug":"/docs/ui-system/coolgrid/row","submenu":[{"title":"Usage example","anchor":"/docs/ui-system/coolgrid/row#usage-example"},{"title":"Overriding defaults","anchor":"/docs/ui-system/coolgrid/row#overriding-defaults"},{"title":"Properties","anchor":"/docs/ui-system/coolgrid/row#properties"},{"title":"Using props example","anchor":"/docs/ui-system/coolgrid/row#using-props-example"},{"title":"Responsive object type props","anchor":"/docs/ui-system/coolgrid/row#responsive-object-type-props"},{"title":"Responsive array type props","anchor":"/docs/ui-system/coolgrid/row#responsive-array-type-props"},{"title":"Props passed via Context","anchor":"/docs/ui-system/coolgrid/row#props-passed-via-context"}]},{"title":"Col","slug":"/docs/ui-system/coolgrid/col","submenu":[{"title":"Usage example","anchor":"/docs/ui-system/coolgrid/col#usage-example"},{"title":"Properties","anchor":"/docs/ui-system/coolgrid/col#properties"},{"title":"Using props example","anchor":"/docs/ui-system/coolgrid/col#using-props-example"},{"title":"Responsive object type props","anchor":"/docs/ui-system/coolgrid/col#responsive-object-type-props"},{"title":"Responsive array type props","anchor":"/docs/ui-system/coolgrid/col#responsive-array-type-props"}]},{"title":"Theme","slug":"/docs/ui-system/coolgrid/theme","submenu":[{"title":"Provider","anchor":"/docs/ui-system/coolgrid/theme#provider"},{"title":"Default theme","anchor":"/docs/ui-system/coolgrid/theme#default-theme"},{"title":"Create own theme","anchor":"/docs/ui-system/coolgrid/theme#create-own-theme"}]},{"title":"Examples","slug":"/docs/ui-system/coolgrid/examples","submenu":[{"title":"Custom columns grid","anchor":"/docs/ui-system/coolgrid/examples#custom-columns-grid"},{"title":"Equal columns","anchor":"/docs/ui-system/coolgrid/examples#equal-columns"},{"title":"Equal column height","anchor":"/docs/ui-system/coolgrid/examples#equal-column-height"},{"title":"Nested columns","anchor":"/docs/ui-system/coolgrid/examples#nested-columns"},{"title":"One column with set size","anchor":"/docs/ui-system/coolgrid/examples#one-column-with-set-size"},{"title":"Spacing example","anchor":"/docs/ui-system/coolgrid/examples#spacing-example"},{"title":"Unequal columns","anchor":"/docs/ui-system/coolgrid/examples#unequal-columns"}]}],"content":{"compiledSource":"var d=Object.defineProperty,c=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(e,o,t)=>o in e?d(e,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[o]=t,r=(e,o)=>{for(var t in o||(o={}))a.call(o,t)&&p(e,t,o[t]);if(i)for(var t of i(o))s.call(o,t)&&p(e,t,o[t]);return e},l=(e,o)=>c(e,u(o));var m=(e,o)=>{var t={};for(var n in e)a.call(e,n)&&o.indexOf(n)<0&&(t[n]=e[n]);if(e!=null&&i)for(var n of i(e))o.indexOf(n)<0&&s.call(e,n)&&(t[n]=e[n]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var n=t,{components:e}=n,o=m(n,[\"components\"]);return mdx(MDXLayout,l(r(r({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Theme\"),mdx(\"h2\",null,\"Provider\"),mdx(\"p\",null,\"As this library is built on \",mdx(\"strong\",{parentName:\"p\"},\"styled-components\"),\", the \",mdx(\"strong\",{parentName:\"p\"},\"Provider\"),` component\nimplements `,mdx(\"strong\",{parentName:\"p\"},\"ThemeProvider\"),` from styled-components under the hood, so please bear\nthis in mind.`),mdx(\"p\",null,\"Provider implementation looks like this:\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"live=false\",live:\"false\"}),`import { createContext } from 'react'\nimport { ThemeProvider } from 'styled-components'\n\nconst Context = createContext({})\n\nexport default ({ children, theme }) => (\n  <Context.Provider value={theme}>\n    <ThemeProvider theme={theme}>{children}</ThemeProvider>\n  </Context.Provider>\n)\n`)),mdx(\"h2\",null,\"Default theme\"),mdx(\"p\",null,\"Below is how default grid theme looks like. It is \",mdx(\"strong\",{parentName:\"p\"},\"important\"),`\nto implement `,mdx(\"strong\",{parentName:\"p\"},\"container widths\"),` it into your provider under\n`,mdx(\"strong\",{parentName:\"p\"},\"grid\"),\" or \",mdx(\"strong\",{parentName:\"p\"},\"coolgrid\"),\" key.\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"live=false\",live:\"false\"}),`import { theme } from '@vitus-labs/coolgrid'\n\nconst theme = {\n  rootSize: 16, // is being used to convert viewport px to em units\n  columns: 12, // default bootstrap column grid example\n  breakpoints: {\n    // default bootstrap configuration example\n    xs: 0,\n    sm: 576,\n    md: 768,\n    lg: 992,\n    xl: 1200,\n  },\n  grid: {\n    container: {\n      xs: '100%',\n      sm: 540,\n      md: 720,\n      lg: 960,\n      xl: 1140,\n    },\n  },\n  /* ...rest of your theme */\n}\n`)),mdx(\"h2\",null,\"Create own theme\"),mdx(\"p\",null,\"You can change the default count of \",mdx(\"inlineCode\",{parentName:\"p\"},\"columns\"),`, or define\nyour own `,mdx(\"inlineCode\",{parentName:\"p\"},\"breakpoints\"),\".\"),mdx(\"h3\",null,\"Customize breakpoints\"),mdx(\"p\",null,\"For the \",mdx(\"strong\",{parentName:\"p\"},\"smallest screen\"),\", you must set viewport to \",mdx(\"strong\",{parentName:\"p\"},\"0\"),`.\nFor the other viewport properties you can set `,mdx(\"inlineCode\",{parentName:\"p\"},\"viewport\"),`\nand `,mdx(\"inlineCode\",{parentName:\"p\"},\"container\"),` width in pixels (without using unit). If you\nset `,mdx(\"inlineCode\",{parentName:\"p\"},\"rootSize\"),`, your defined sizes od viewports will be\nrecalculated to `,mdx(\"inlineCode\",{parentName:\"p\"},\"em\"),` units. If you do not specify rootSize,\nit will fallback to pixels.`),mdx(\"p\",null,\"Below, you can see customized breakpoints.\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"live=false\",live:\"false\"}),`const theme = {\n  breakpoints: {\n    phone: 320,\n    tablet: 768,\n    notebook: 1366,\n  },\n  // you can use either \\`grid\\` or \\`coolgrid\\`\n  coolgrid: {\n    container: {\n      // must use the same keys as breakpoints\n      phone: 300,\n      tablet: 740,\n      notebook: 1200,\n    },\n  },\n  // ...rest of theme\n}\n`)),mdx(\"p\",null,\"You can also use units in \",mdx(\"inlineCode\",{parentName:\"p\"},\"viewport\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"container\"),` key. When value\nis a number it fallbacks to `,mdx(\"inlineCode\",{parentName:\"p\"},\"px\"),`, or when rootSize is set it will\nbe calculated to `,mdx(\"inlineCode\",{parentName:\"p\"},\"em\"),\"s, for example:\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"live=false\",live:\"false\"}),`const theme = {\n  breakpoints: {\n    phone: '320px',\n    tablet: '768px',\n    notebook: '1366px',\n  },\n  grid: {\n    container: {\n      phone: '100%',\n      tablet: 740,\n      notebook: '1200px',\n    },\n  },\n  // ...rest\n}\n`)),mdx(\"h3\",null,\"Override settings in Container\"),mdx(\"p\",null,\"You can even override cofiguration for only one \",mdx(\"strong\",{parentName:\"p\"},\"Container\"),`.\nContainer component accepts `,mdx(\"strong\",{parentName:\"p\"},\"columns\"),\" and \",mdx(\"strong\",{parentName:\"p\"},\"width\"),\" props.\"),mdx(\"p\",null,\"See more configuration options in \",mdx(\"a\",r({parentName:\"p\"},{href:\"/docs/ui-system/coolgrid/container\"}),\"Container section\"),\".\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"live=false\",live:\"false\"}),`import { Provider, Container, Row, Col, theme } from '@vitus-labs/coolgrid'\n\n// defined breakpoints in Provider\nconst breakpoints = {\n  phone: 320,\n  tablet: 768,\n  notebook: 1366,\n}\n\n// uses the same keys!\nconst width = {\n  phone: 300,\n  tablet: 740,\n  notebook: 1200,\n}\n\nexport default () => (\n  <Provider theme={theme}>\n    <Container columns={7} width={width}>\n      <Row>...</Row>\n      <Row>...</Row>\n    </Container>\n  </Provider>\n)\n`)),mdx(\"h3\",null,\"Override settings in Row\"),mdx(\"p\",null,\"You can even override cofiguration for each \",mdx(\"strong\",{parentName:\"p\"},\"Row\"),` separately.\nFor Rows you can define different cound of `,mdx(\"strong\",{parentName:\"p\"},\"columns\"),\" only.\"),mdx(\"p\",null,\"See more configuration options in \",mdx(\"a\",r({parentName:\"p\"},{href:\"/docs/ui-system/coolgrid/row\"}),\"Row section\"),\".\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"live=false\",live:\"false\"}),`import { Provider, Container, Row, Col, theme } from '@vitus-labs/coolgrid'\n\nexport default () => (\n  <Provider theme={theme}>\n    <Container>\n      <Row columns={7}>...</Row>\n      <Row columns={5}>...</Row>\n    </Container>\n  </Provider>\n)\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}