{"pageProps":{"meta":{"title":"Elements / List","description":""},"menu":[{"title":"Getting started","slug":"/docs/ui-system/elements/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/elements/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/elements/getting-started#installation"},{"title":"Dependencies","anchor":"/docs/ui-system/elements/getting-started#dependencies"},{"title":"Available components","anchor":"/docs/ui-system/elements/getting-started#available-components"}]},{"title":"Element","slug":"/docs/ui-system/elements/element","submenu":[{"title":"Examples","anchor":"/docs/ui-system/elements/element#examples"},{"title":"Render children","anchor":"/docs/ui-system/elements/element#render-children"},{"title":"Before & After content","anchor":"/docs/ui-system/elements/element#before-&-after-content"},{"title":"Vertical & Horizontal alignment","anchor":"/docs/ui-system/elements/element#vertical-&-horizontal-alignment"},{"title":"Horizontal element","anchor":"/docs/ui-system/elements/element#horizontal-element"},{"title":"Vertical element","anchor":"/docs/ui-system/elements/element#vertical-element"},{"title":"Props","anchor":"/docs/ui-system/elements/element#props"}]},{"title":"List","slug":"/docs/ui-system/elements/list","submenu":[{"title":"Example","anchor":"/docs/ui-system/elements/list#example"},{"title":"Root element","anchor":"/docs/ui-system/elements/list#root-element"},{"title":"Render Items","anchor":"/docs/ui-system/elements/list#render-items"},{"title":"Data properties","anchor":"/docs/ui-system/elements/list#data-properties"},{"title":"Item key value","anchor":"/docs/ui-system/elements/list#item-key-value"},{"title":"Custom item component","anchor":"/docs/ui-system/elements/list#custom-item-component"},{"title":"Custom Item props","anchor":"/docs/ui-system/elements/list#custom-item-props"},{"title":"Wrapping items by another component","anchor":"/docs/ui-system/elements/list#wrapping-items-by-another-component"},{"title":"Extend Wrapper props","anchor":"/docs/ui-system/elements/list#extend-wrapper-props"},{"title":"List properties","anchor":"/docs/ui-system/elements/list#list-properties"}]},{"title":"Text","slug":"/docs/ui-system/elements/text","submenu":[{"title":"Examples","anchor":"/docs/ui-system/elements/text#examples"},{"title":"Using Text component","anchor":"/docs/ui-system/elements/text#using-text-component"},{"title":"Text types","anchor":"/docs/ui-system/elements/text#text-types"},{"title":"Paragraph","anchor":"/docs/ui-system/elements/text#paragraph"},{"title":"Props","anchor":"/docs/ui-system/elements/text#props"}]},{"title":"Overlay","slug":"/docs/ui-system/elements/overlay","submenu":[{"title":"Using Overlay","anchor":"/docs/ui-system/elements/overlay#using-overlay"},{"title":"Overlay Properties","anchor":"/docs/ui-system/elements/overlay#overlay-properties"}]},{"title":"Portal","slug":"/docs/ui-system/elements/portal","submenu":[{"title":"Examples","anchor":"/docs/ui-system/elements/portal#examples"},{"title":"Properties","anchor":"/docs/ui-system/elements/portal#properties"}]}],"content":{"compiledSource":"var d=Object.defineProperty,c=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var p=(n,t,a)=>t in n?d(n,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[t]=a,e=(n,t)=>{for(var a in t||(t={}))s.call(t,a)&&p(n,a,t[a]);if(o)for(var a of o(t))i.call(t,a)&&p(n,a,t[a]);return n},l=(n,t)=>c(n,g(t));var m=(n,t)=>{var a={};for(var r in n)s.call(n,r)&&t.indexOf(r)<0&&(a[r]=n[r]);if(n!=null&&o)for(var r of o(n))t.indexOf(r)<0&&i.call(n,r)&&(a[r]=n[r]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var r=a,{components:n}=r,t=m(r,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),t),{components:n,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"List\"),mdx(\"p\",null,\"List is a component to render simple lists with extensive API.\"),mdx(\"p\",null,\"It also helps avoiding repeatable patterns and using array \",mdx(\"inlineCode\",{parentName:\"p\"},\"map\"),`\nfunction repeatedly. List component helps keeping components\nmore structured and organized.`),mdx(\"p\",null,\"List provides extensive API, like ability to wrap your \",mdx(\"inlineCode\",{parentName:\"p\"},\"component\"),`\nby `,mdx(\"inlineCode\",{parentName:\"p\"},\"wrapComponent\"),\" and possibility of extending \",mdx(\"inlineCode\",{parentName:\"p\"},\"itemProps\"),` and\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"wrapProps\"),\" accordingly for better component composition.\"),mdx(\"h2\",null,\"Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { name: 'John', surname: 'Doe' },\n  { name: 'Sam', surname: 'Johnson' },\n]\n\nconst component = ({ name, surname }) => (\n  <Element block label={name + ' ' + surname} css={styles} />\n)\n\nconst Users = () => (\n  <List\n    rootElement\n    block\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    data={data}\n    component={component}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h2\",null,\"Root element\"),mdx(\"p\",null,\"By default the List component renders \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://reactjs.org/docs/fragments.html\"}),\"Fragment\"),`\nof items. To enable `,mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/ui-system/elements/element\"}),\"Element\"),`\ncomponent to be used as `,mdx(\"strong\",{parentName:\"p\"},\"root\"),\" element, \",mdx(\"inlineCode\",{parentName:\"p\"},\"rootElement\"),` prop needs\nto be set as `,mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\".\"),mdx(\"p\",null,`Using the root element provides another extensive oportunities\nfor component composition, e.g. vertical/horizontal alignment, attaching\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"beforeContent\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"afterContent\"),\" etc.\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"Warning:\"),\" \",mdx(\"inlineCode\",{parentName:\"p\"},\"content\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"label\"),\" props are being ignored.\"),mdx(\"h2\",null,\"Render Items\"),mdx(\"p\",null,\"There are several ways of rendering children within \",mdx(\"strong\",{parentName:\"p\"},\"List\"),\" component.\"),mdx(\"h3\",null,\"Render children\"),mdx(\"p\",null,\"First of all, you can use \",mdx(\"strong\",{parentName:\"p\"},\"List\"),` as a wrapper for\nyour components and just pass children normally like you do in React.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst User = ({ name, surname }) => (\n  <Element label={name + ' ' + surname} css={styles} />\n)\n\nconst Users = () => (\n  <List rootElement vertical>\n    <User name=\"John\" surname=\"Doe\" />\n    <User name=\"Sam\" surname=\"Johnson\" />\n  </List>\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h3\",null,\"Render from an array\"),mdx(\"p\",null,\"Another way of rendering children is passing a props \",mdx(\"inlineCode\",{parentName:\"p\"},\"data\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"component\"),`\nto the List component. It will iterate over the `,mdx(\"inlineCode\",{parentName:\"p\"},\"data\"),` array and pass item\nprops to the assigned `,mdx(\"inlineCode\",{parentName:\"p\"},\"component\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\n// key is not passed, it's used as a React key prop\nconst data = [\n  { key: '1', name: 'John', surname: 'Doe' },\n  { key: '2', name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ name, surname }) => (\n  <Element label={\\`\\${name} \\${surname}\\`} css={styles} />\n)\n\nconst UserList = () => <List rootElement data={data} component={User} />\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<UserList />)\n`)),mdx(\"h2\",null,\"Data properties\"),mdx(\"p\",null,\"Prop \",mdx(\"inlineCode\",{parentName:\"p\"},\"data\"),\" must be of \",mdx(\"inlineCode\",{parentName:\"p\"},\"Array\"),` type, but the items within array can\nbe of different types. Let's dive more into detail in the following\nsections.`),mdx(\"h3\",null,\"Array of objects\"),mdx(\"p\",null,\"One of the most common cases is to render \",mdx(\"inlineCode\",{parentName:\"p\"},\"array\"),\" of \",mdx(\"inlineCode\",{parentName:\"p\"},\"objects\"),` as a list.\nThis can be simply done by following example:`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\n// using key is not required, List fallbacks to map index value\nconst data = [\n  { key: '1', name: 'John', surname: 'Doe' },\n  { key: '2', name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ name, surname }) => (\n  <Element label={\\`\\${name} \\${surname}\\`} css={styles} />\n)\n\nconst UserList = () => <List rootElement data={data} component={User} />\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<UserList />)\n`)),mdx(\"h3\",null,\"Array of strings or numbers\"),mdx(\"p\",null,`Sometimes the case is just to render list of items which accepts only one\nprop of type `,mdx(\"inlineCode\",{parentName:\"p\"},\"string\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"number\"),`. In that case can be simply passed\nan array of `,mdx(\"inlineCode\",{parentName:\"p\"},\"string[]\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"number[]\"),\" as \",mdx(\"inlineCode\",{parentName:\"p\"},\"data\"),` prop. In this case must be\ndefined also `,mdx(\"strong\",{parentName:\"p\"},\"valueName\"),` prop which defines name of the prop to be passed\nto the iteration component.`),mdx(\"p\",null,\"List also filters \",mdx(\"inlineCode\",{parentName:\"p\"},\"null\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"undefined\"),` values out of the box, therefore\ndoesn't render empty elements which could lead to throwing errors.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = ['John Doe', 'Sam Johnson']\n\nconst User = ({ label }) => <Element label={label} css={styles} />\n\nconst Users = () => (\n  <List\n    rootElement\n    vertical\n    // each item will be passed as 'label' prop\n    valueName=\"label\"\n    data={data}\n    component={User}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h2\",null,\"Item key value\"),mdx(\"p\",null,\"There is always a need to add a \",mdx(\"strong\",{parentName:\"p\"},\"key\"),\" when \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://reactjs.org/docs/lists-and-keys.html\"}),`rendering elements\ndynamically`),\".\"),mdx(\"p\",null,\"By default, List component will look for \",mdx(\"strong\",{parentName:\"p\"},\"key\"),\" \",\"\\u2192\",\" \",mdx(\"strong\",{parentName:\"p\"},\"id\"),\" \",\"\\u2192\",`\n`,mdx(\"strong\",{parentName:\"p\"},\"itemId\"),\" in your item \",mdx(\"inlineCode\",{parentName:\"p\"},\"object\"),\" within \",mdx(\"inlineCode\",{parentName:\"p\"},\"data\"),` prop. In the case, there is\nnon of the mentioned params available, List will fallback to `,mdx(\"strong\",{parentName:\"p\"},\"index\"),`\nvalue from the array `,mdx(\"inlineCode\",{parentName:\"p\"},\"map\"),\" function.\"),mdx(\"p\",null,\"List also provides control over items keys. To define custom \",mdx(\"inlineCode\",{parentName:\"p\"},\"key\"),`,\nthe `,mdx(\"strong\",{parentName:\"p\"},\"itemKey\"),\" prop can be passed either as a type of \",mdx(\"inlineCode\",{parentName:\"p\"},\"string\"),`\nor a callback `,mdx(\"inlineCode\",{parentName:\"p\"},\"function\"),\".\"),mdx(\"h3\",null,\"itemKey as a string\"),mdx(\"p\",null,\"When passing a \",mdx(\"inlineCode\",{parentName:\"p\"},\"string\"),\" value, \",mdx(\"strong\",{parentName:\"p\"},\"List\"),\" will use it as a \",mdx(\"inlineCode\",{parentName:\"p\"},\"key\"),` name from\nitem object from `,mdx(\"inlineCode\",{parentName:\"p\"},\"data\"),\" array. See the example below.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { userId: '1', name: 'John', surname: 'Doe' },\n  { userId: '2', name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ name, surname }) => (\n  <Element label={\\`\\${name} \\${surname}\\`} css={styles} />\n)\n\nconst UserList = () => (\n  <List rootElement itemKey=\"userId\" data={data} component={User} />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<UserList />)\n`)),mdx(\"h3\",null,\"itemKey as a callback\"),mdx(\"p\",null,\"By passing a callback function as value can be created a customized \",mdx(\"strong\",{parentName:\"p\"},\"key\"),`\nfor each element. See the example below.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\n// userId as a key\nconst data = [\n  { userId: '1', name: 'John', surname: 'Doe' },\n  { userId: '2', name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ name, surname }) => (\n  <Element label={\\`\\${name} \\${surname}\\`} css={styles} />\n)\n\nconst UserList = () => (\n  <List\n    rootElement\n    vertical\n    contentAlignX=\"block\"\n    itemKey={(itemProps, i) => itemProps.userId}\n    data={data}\n    component={User}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<UserList />)\n`)),mdx(\"h2\",null,\"Custom item component\"),mdx(\"p\",null,`In that case, you want to render items but some of them need to be\nrender using different component, you may just want to add a\n`,mdx(\"strong\",{parentName:\"p\"},\"component\"),\" prop into you object data item.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst User = ({ name, surname }) => (\n  <Element label={\\`\\${name} \\${surname}\\`} css={styles} />\n)\n\nconst SpecialUser = ({ name, surname }) => (\n  <Element label={\\`\\${name} \\${surname} - Special user\\`} css={styles} />\n)\n\nconst data = [\n  { userId: '1', name: 'John', surname: 'Doe' },\n  // \\u2193\\u2193\\u2193 added component property\n  { userId: '2', name: 'Sam', surname: 'Johnson', component: SpecialUser },\n]\n\nconst UserList = () => (\n  <List\n    rootElement\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    itemKey={(itemProps) => itemProps.userId}\n    data={data}\n    component={User}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<UserList />)\n`)),mdx(\"h2\",null,\"Custom Item props\"),mdx(\"p\",null,\"You can even \",mdx(\"strong\",{parentName:\"p\"},\"data\"),\" create dynamically by using \",mdx(\"inlineCode\",{parentName:\"p\"},\"itemProps\"),` prop.\nThis prop can be either an object or a callback function.`),mdx(\"p\",null,`When using a callback function, the function accepts the following arguments:\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"(item, extendProps) => ({ /* returned object */ })\"),\".\"),mdx(\"p\",null,\"Where \",mdx(\"inlineCode\",{parentName:\"p\"},\"item\"),\" is data from \",mdx(\"inlineCode\",{parentName:\"p\"},\"data\"),\" array prop and \",mdx(\"inlineCode\",{parentName:\"p\"},\"extendProps\"),` are\nmeta data of each item in the list containing (`,mdx(\"strong\",{parentName:\"p\"},\"index\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"position\"),`,\n`,mdx(\"strong\",{parentName:\"p\"},\"first\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"last\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"odd\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"even\"),\").\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { name: 'John', surname: 'Doe' },\n  { name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ userId, name, surname }) => (\n  <Element label={\\`[\\${userId}] - \\${name} \\${surname}\\`} css={styles} />\n)\n\nconst UserList = () => (\n  <List\n    rootElement\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    data={data}\n    component={User}\n    itemProps={(item, extendProps) => ({\n      // \\u2193\\u2193\\u2193 create your own props dynamically\n      userId: extendProps.position,\n    })}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<UserList />)\n`)),mdx(\"h2\",null,\"Wrapping items by another component\"),mdx(\"p\",null,`To render a list of items but need to wrap each element by\nanother component, there is no need to first create a new React\ncomponent to combine them together. Prop `,mdx(\"inlineCode\",{parentName:\"p\"},\"wrapComponent\"),` is a way\nto go to add a wrapping component.`),mdx(\"p\",null,`This might be useful in situations like having a list of links but\nwant to wrap them to `,mdx(\"inlineCode\",{parentName:\"p\"},\"li\"),\" HTML tag to create a HTML valid list of links.\"),mdx(\"p\",null,\"The \",mdx(\"strong\",{parentName:\"p\"},\"root\"),\" element of List is \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/ui-system/elements/element\"}),\"Element component\"),`,\ntherefore can cover rendering `,mdx(\"inlineCode\",{parentName:\"p\"},\"ul\"),` HTML tag to have a full valid\nand extensible HTML list.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { name: 'John', surname: 'Doe' },\n  { name: 'Sam', surname: 'Johnson' },\n]\n\nconst Wrapper = (props) => <li {...props} />\n\nconst User = ({ name, surname }) => (\n  <Element label={\\`\\${name} \\${surname}\\`} css={styles} />\n)\n\nconst UserList = () => (\n  <List\n    rootElement\n    tag=\"ul\"\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    data={data}\n    component={User}\n    wrapComponent={Wrapper}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<UserList />)\n`)),mdx(\"h2\",null,\"Extend Wrapper props\"),mdx(\"p\",null,\"Extending wrapper props works the same way as extending item props.\"),mdx(\"p\",null,`When using a callback function, the function accepts the following arguments:\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"(item, extendProps) => ({ /* returned object */ })\"),\".\"),mdx(\"p\",null,\"Where \",mdx(\"inlineCode\",{parentName:\"p\"},\"item\"),\" is data from \",mdx(\"inlineCode\",{parentName:\"p\"},\"data\"),\" array prop and \",mdx(\"inlineCode\",{parentName:\"p\"},\"extendProps\"),` are\nmeta data of each item in the list containing (`,mdx(\"strong\",{parentName:\"p\"},\"index\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"position\"),`,\n`,mdx(\"strong\",{parentName:\"p\"},\"first\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"last\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"odd\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"even\"),\").\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { name: 'John', surname: 'Doe' },\n  { name: 'Sam', surname: 'Johnson' },\n]\n\nconst Wrapper = ({ position, children }) => (\n  <Element tag=\"li\" css={styles}>\n    [{position}] {children}\n  </Element>\n)\n\nconst User = ({ name, surname }) => <Element label={name + ' ' + surname} />\n\nconst UserList = () => (\n  <List\n    rootElement\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    data={data}\n    component={User}\n    wrapComponent={Wrapper}\n    wrapProps={(item, extendProps) => extendProps}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<UserList />)\n`)),mdx(\"h2\",null,\"List properties\"),mdx(\"p\",null,\"List accepts all \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/ui-system/elements/element\"}),\"Element\"),` properties\n(except `,mdx(\"inlineCode\",{parentName:\"p\"},\"label\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"content\"),`) and the following props. These props\nare taken into account only when `,mdx(\"inlineCode\",{parentName:\"p\"},\"rootElement\"),\" is \",mdx(\"strong\",{parentName:\"p\"},\"enabled\"),\".\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Name\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Type\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Default value\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"left\"}),\"Description\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"rootElement\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"boolean\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"false\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"Whether a root element should be rendered or the output should be just a type of React \",mdx(\"strong\",{parentName:\"td\"},\"Fragment\"))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"children\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"ReactNode\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"Children to List can be passed manually by using \",mdx(\"strong\",{parentName:\"td\"},\"children\"),\" prop\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"data\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"Array\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"An array of item values to be passed to item component\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"component\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"ComponentType\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"A component to be rendered per item\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"wrapComponent\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"ComponentType\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"A component to be used as a wrapper component for item component\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"valueName\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"string\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"Can be used when \",mdx(\"strong\",{parentName:\"td\"},\"data\"),\" consists of \",mdx(\"strong\",{parentName:\"td\"},\"strings\"),\" or \",mdx(\"strong\",{parentName:\"td\"},\"numbers\"),\" to name value being passed as a prop\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"itemKey\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"string\"),\" \",mdx(\"strong\",{parentName:\"td\"},\"callback\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"Prop for defining item key name / value if default behavior doesn't work out\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"itemProps\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"object\"),\" \",mdx(\"strong\",{parentName:\"td\"},\"callback\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"A custobizable hook for dynamically render props for each item\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"wrapProps\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"object\"),\" \",mdx(\"strong\",{parentName:\"td\"},\"callback\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"A custobizable hook for dynamically render props for each item\")))))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}