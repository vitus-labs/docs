{"pageProps":{"meta":{"name":"Rocketstyle \\ Getting started","title":"","description":""},"menu":[{"title":"Getting started","slug":"/docs/ui-system/rocketstyle/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/rocketstyle/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/rocketstyle/getting-started#installation"},{"title":"Getting started","anchor":"/docs/ui-system/rocketstyle/getting-started#getting-started"},{"title":"Create your first component","anchor":"/docs/ui-system/rocketstyle/getting-started#create-your-first-component"},{"title":"Reusability","anchor":"/docs/ui-system/rocketstyle/getting-started#reusability"},{"title":"Responsive styling","anchor":"/docs/ui-system/rocketstyle/getting-started#responsive-styling"},{"title":"Light / dark mode","anchor":"/docs/ui-system/rocketstyle/getting-started#light-/-dark-mode"},{"title":"Extend component","anchor":"/docs/ui-system/rocketstyle/getting-started#extend-component"}]},{"title":"Initialization","slug":"/docs/ui-system/rocketstyle/initialization","submenu":[{"title":"Bootstrap your rocket component","anchor":"/docs/ui-system/rocketstyle/initialization#bootstrap-your-rocket-component"},{"title":"Defining styling dimensions","anchor":"/docs/ui-system/rocketstyle/initialization#defining-styling-dimensions"},{"title":"Defining valid CSS styles","anchor":"/docs/ui-system/rocketstyle/initialization#defining-valid-css-styles"}]},{"title":"Attributes","slug":"/docs/ui-system/rocketstyle/attributes","submenu":[{"title":"Attrs as a plain object","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-plain-object"},{"title":"Attrs as a callback","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-callback"}]},{"title":"Theme","slug":"/docs/ui-system/rocketstyle/theme","submenu":[{"title":"Theme as a plain object","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-plain-object"},{"title":"Theme as a callback","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-callback"}]},{"title":"Compose","slug":"/docs/ui-system/rocketstyle/compose","submenu":[{"title":"An example of using compose","anchor":"/docs/ui-system/rocketstyle/compose#an-example-of-using-compose"}]},{"title":"Pseudo State","slug":"/docs/ui-system/rocketstyle/pseudo-state","submenu":[{"title":"Pseudo component properties","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-component-properties"},{"title":"Pseudo via context","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-via-context"},{"title":"Accessing props in styles","anchor":"/docs/ui-system/rocketstyle/pseudo-state#accessing-props-in-styles"}]},{"title":"Dimensions","slug":"/docs/ui-system/rocketstyle/dimensions","submenu":[{"title":"What are dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#what-are-dimensions"},{"title":"Configuration options","anchor":"/docs/ui-system/rocketstyle/dimensions#configuration-options"},{"title":"Define dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#define-dimensions"}]}],"content":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var i=(t,n,o)=>n in t?c(t,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[n]=o,e=(t,n)=>{for(var o in n||(n={}))l.call(n,o)&&i(t,o,n[o]);if(s)for(var o of s(n))r.call(n,o)&&i(t,o,n[o]);return t},p=(t,n)=>d(t,h(n));var m=(t,n)=>{var o={};for(var a in t)l.call(t,a)&&n.indexOf(a)<0&&(o[a]=t[a]);if(t!=null&&s)for(var a of s(t))n.indexOf(a)<0&&r.call(t,a)&&(o[a]=t[a]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var a=o,{components:t}=a,n=m(a,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),n),{components:t,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Getting started\"),mdx(\"p\",null,\"Rocketstyle is \",mdx(\"strong\",{parentName:\"p\"},\"ultra powerful\"),\" and extensible \",mdx(\"strong\",{parentName:\"p\"},\"styling system\"),` for building\nReact components effectively, blazingly fast, and make them easily extensible\nand reusable.`),mdx(\"h2\",null,\"Motivation\"),mdx(\"p\",null,`There are several solutions and helpers but none of them have fit my\nneeds so far. They were not enough extensible. With Rocketstyle\nyou can do basically whatever you want while writing less code\nand have less hassle in styles in your application.`),mdx(\"h3\",null,\"Advantages\"),mdx(\"p\",null,`One of the advantages is that you do not need to import\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://reactjs.org/\"}),\"React\"),\" or \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://styled-components.com/\"}),\"styled-components\"),`\nin each file where you want to style your components. You can\njust import a simple `,mdx(\"strong\",{parentName:\"p\"},\"rocketstyle\"),` component and extend it as you need\nin your other components. The composability is in many cases quite\nunlimited and you code will be much cleaner.`),mdx(\"p\",null,`Here are some of all those benefits you can feel right after you start using\nRocketstyle:`),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"less imports,\"),mdx(\"li\",{parentName:\"ol\"},\"less code,\"),mdx(\"li\",{parentName:\"ol\"},\"less hassle,\"),mdx(\"li\",{parentName:\"ol\"},\"huge impact in \",mdx(\"strong\",{parentName:\"li\"},\"reusability\"),\" and \",mdx(\"strong\",{parentName:\"li\"},\"consistency\"),\".\")),mdx(\"p\",null,`Sounds cool, right? So, let's go through the basics and see how powerful\nit can be.`),mdx(\"h2\",null,\"Installation\"),mdx(\"p\",null,\"You can install it with your preferred tool (\",mdx(\"inlineCode\",{parentName:\"p\"},\"yarn\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"npm\"),\").\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-powershell\"}),`# with yarn\nyarn add rocketstyle\n\n# or with npm\nnpm install rocketstyle --save\n`)),mdx(\"h3\",null,\"Dependencies\"),mdx(\"p\",null,\"Rocketstyle depends on the following packages which need to be installed as well.\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Package name\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Version\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"react\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\">= 16.7\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"styled-components\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\">= 5.0\")))),mdx(\"h2\",null,\"Getting started\"),mdx(\"p\",null,`Rocketstyle uses styled-components in the background and basically works\nas a wrapper which will generate a `,mdx(\"strong\",{parentName:\"p\"},\"theme\"),` object which will be passed\nto a valid styled component.`),mdx(\"p\",null,\"When you pass any css styles it automatically wraps your component by \",mdx(\"strong\",{parentName:\"p\"},\"styled\"),`\nfrom `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://styled-components.com/\"}),\"styled-components\"),` and passes all\nthe styles there so it becomes a regular styled component with its own local\n`,mdx(\"strong\",{parentName:\"p\"},\"theme\"),\" passed as am object prop under \",mdx(\"strong\",{parentName:\"p\"},\"$rocketstyle\"),\" key name.\"),mdx(\"h2\",null,\"Create your first component\"),mdx(\"p\",null,`See the example below to see Rocketstyle in practice. The example\nbelow uses default initialization configuration. For more advance\nusage follow other chapters of this documentation.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import rocketstyle from '@vitus-labs/rocketstyle'\nimport Element from './someReactComponent'\n\nexport default rocketstyle()()({\n  name: 'component/Name',\n  component: Element,\n})\n  .theme((t) => ({\n    fontFamily: 'Arial',\n    lineHeight: 1.5,\n    color: '#000',\n  }))\n  .styles(\n    (css) => css\\`\n      \\${({ $rocketstyle: t }) => css\\`\n        line-height: \\${t.lineHeight};\n        font-family: \\${t.fontFamily};\n        color: \\${t.color};\n      \\`};\n    \\`\n  )\n`)),mdx(\"h2\",null,\"Reusability\"),mdx(\"p\",null,`Imagine you would like to extend the component above. Let's say,\nwe want to change `,mdx(\"inlineCode\",{parentName:\"p\"},\"line-height\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"color\"),`. We can easily do it\nlike several ways:`),mdx(\"h3\",null,\"Passing style properties in theme\"),mdx(\"p\",null,\"We can pass \",mdx(\"inlineCode\",{parentName:\"p\"},\"lineHeight\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"color\"),` in theme object so the styles from\nthe previous example will be able to access those values.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import element from './previous-example-component'\n\nexport const NewElement = element\n  .config({\n    name: 'ReuseElement.name',\n  })\n  .theme(t => ({\n    lineHeight: 3,\n    color: t.white\n  }))\n)\n`)),mdx(\"h3\",null,\"Extending css\"),mdx(\"p\",null,\"We can just pass new css properties to our component.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import element from './previous-example-component'\n\nexport const NewElement = element\n  .config({\n    name: 'ReuseElement.name',\n  })\n  .styles(\n    css => css\\`\n      \\${({ theme: t }) => css\\`\n        line-height: 2;\n        color: black;\n      \\`};\n    \\`\n  )\n)\n`)),mdx(\"h2\",null,\"Responsive styling\"),mdx(\"p\",null,\"If you want to use theming, don't forget to add \",mdx(\"strong\",{parentName:\"p\"},\"theme\"),`\ninto `,mdx(\"strong\",{parentName:\"p\"},\"Provider\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import { Provider } from '@vitus-labs/rocketstyle'\n\nconst component = () => (\n  <Provider\n    theme={\n      {\n        /* ...your theme */\n      }\n    }\n  >\n    {/* ...your components */}\n  </Provider>\n)\n`)),mdx(\"h2\",null,\"Light / dark mode\"),mdx(\"p\",null,\"Rocketstyle also has a built-in support for creating \",mdx(\"strong\",{parentName:\"p\"},\"light\"),\" / \",mdx(\"strong\",{parentName:\"p\"},\"dark\"),` mode\nstyling. By default there is set `,mdx(\"strong\",{parentName:\"p\"},\"mode\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"light\"),`. You may want to change it\nby passing a mode value into `,mdx(\"strong\",{parentName:\"p\"},\"Provider\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import { Provider } from '@vitus-labs/rocketstyle'\n\nconst component = () => (\n  <Provider\n    variant=\"light\" // accepts light | dark\n    theme={\n      {\n        /* ...your theme */\n      }\n    }\n  >\n    {/* ...your components */}\n  </Provider>\n)\n`)),mdx(\"h3\",null,\"Defining styles for dark / light in components\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`const Component = rocketstyle()()({\n  name: 'component/Name',\n  component: Element,\n}).theme((t, m) => ({\n  fontFamily: 'Arial',\n  lineHeight: 1.5,\n  color: m('#000', '#fff'), // light + dark mode styles\n}))\n`)),mdx(\"h2\",null,\"Extend component\"),mdx(\"p\",null,`Rocketstyle uses function chaining so we can just import any rocketstyle\ncomponent and simply extend its `,mdx(\"inlineCode\",{parentName:\"p\"},\"states\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"sizes\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"variants\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"theme\"),`,\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"styles\"),` and so on. Below is a brief example of extending a component with\nadditional css properties:`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import element from './previous-example-component'\n\nexport const NewElementA = element\n  .config({\n    name: 'ExtendElement.newName',\n  })\n  .styles(\n    css => css\\`\n      background-color: black;\n    \\`\n  )\n)\n\n// extend again NewElementA and create NewElement B\nconst NewElementB = NewElementA.styles(css => css\\`text-align: right;\\`)\n`)),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"NewElementA\"),` above will look like the previous component but with\nblack `,mdx(\"inlineCode\",{parentName:\"p\"},\"background-color\"),\".\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"NewElementB\"),` will have black background color and text aligned to\nthe right.`),mdx(\"p\",null,`For more composition patterns examples go through\nthe documentation so you will see the power of Rocketstyle.`))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}