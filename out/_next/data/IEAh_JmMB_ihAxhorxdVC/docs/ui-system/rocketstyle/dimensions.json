{"pageProps":{"meta":{"name":"Rocketstyle \\ Dimensions","title":"","description":""},"menu":[{"title":"Getting started","slug":"/docs/ui-system/rocketstyle/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/rocketstyle/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/rocketstyle/getting-started#installation"},{"title":"Getting started","anchor":"/docs/ui-system/rocketstyle/getting-started#getting-started"},{"title":"Create your first component","anchor":"/docs/ui-system/rocketstyle/getting-started#create-your-first-component"},{"title":"Reusability","anchor":"/docs/ui-system/rocketstyle/getting-started#reusability"},{"title":"Responsive styling","anchor":"/docs/ui-system/rocketstyle/getting-started#responsive-styling"},{"title":"Light / dark mode","anchor":"/docs/ui-system/rocketstyle/getting-started#light-/-dark-mode"},{"title":"Extend component","anchor":"/docs/ui-system/rocketstyle/getting-started#extend-component"}]},{"title":"Initialization","slug":"/docs/ui-system/rocketstyle/initialization","submenu":[{"title":"Bootstrap your rocket component","anchor":"/docs/ui-system/rocketstyle/initialization#bootstrap-your-rocket-component"},{"title":"Defining styling dimensions","anchor":"/docs/ui-system/rocketstyle/initialization#defining-styling-dimensions"},{"title":"Defining valid CSS styles","anchor":"/docs/ui-system/rocketstyle/initialization#defining-valid-css-styles"}]},{"title":"Attributes","slug":"/docs/ui-system/rocketstyle/attributes","submenu":[{"title":"Attrs as a plain object","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-plain-object"},{"title":"Attrs as a callback","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-callback"}]},{"title":"Theme","slug":"/docs/ui-system/rocketstyle/theme","submenu":[{"title":"Theme as a plain object","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-plain-object"},{"title":"Theme as a callback","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-callback"}]},{"title":"Compose","slug":"/docs/ui-system/rocketstyle/compose","submenu":[{"title":"An example of using compose","anchor":"/docs/ui-system/rocketstyle/compose#an-example-of-using-compose"}]},{"title":"Pseudo State","slug":"/docs/ui-system/rocketstyle/pseudo-state","submenu":[{"title":"Pseudo component properties","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-component-properties"},{"title":"Pseudo via context","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-via-context"},{"title":"Accessing props in styles","anchor":"/docs/ui-system/rocketstyle/pseudo-state#accessing-props-in-styles"}]},{"title":"Dimensions","slug":"/docs/ui-system/rocketstyle/dimensions","submenu":[{"title":"What are dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#what-are-dimensions"},{"title":"Configuration options","anchor":"/docs/ui-system/rocketstyle/dimensions#configuration-options"},{"title":"Define dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#define-dimensions"}]}],"content":{"compiledSource":"var m=Object.defineProperty,u=Object.defineProperties;var C=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(e,n,i)=>n in e?m(e,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[n]=i,a=(e,n)=>{for(var i in n||(n={}))l.call(n,i)&&p(e,i,n[i]);if(t)for(var i of t(n))s.call(n,i)&&p(e,i,n[i]);return e},r=(e,n)=>u(e,C(n));var d=(e,n)=>{var i={};for(var o in e)l.call(e,o)&&n.indexOf(o)<0&&(i[o]=e[o]);if(e!=null&&t)for(var o of t(e))n.indexOf(o)<0&&s.call(e,o)&&(i[o]=e[o]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var o=i,{components:e}=o,n=d(o,[\"components\"]);return mdx(MDXLayout,r(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Dimensions\"),mdx(\"p\",null,`Dimensions help you split the logic and different needs of styles\nfor each component. For example splitting `,mdx(\"inlineCode\",{parentName:\"p\"},\"state\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"size\"),` styles\ninto separate logic dimensions.`),mdx(\"p\",null,\"For example, let's assume we have following states: \",mdx(\"inlineCode\",{parentName:\"p\"},\"primary\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"secondary\"),`,\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"neutral\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"danger\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"warning\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"success\"),\", and following sizes: \",mdx(\"inlineCode\",{parentName:\"p\"},\"small\"),`,\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"medium\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"large\"),\".\"),mdx(\"p\",null,`Spliting it into different dimensions allows us to combine those styles into\nfinal visual of our component. Therefore, we can use our component\nas following:`),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\n\nexport default () => (\n  <>\n    <RocketComponent state=\"primary\" size=\"small\" />\n    <RocketComponent state=\"secondary\" size=\"large\" />\n    {/* ... */}\n  </>\n)\n`)),mdx(\"h2\",null,\"What are dimensions\"),mdx(\"p\",null,`When defining dimensions, first thing of the cases hou you are\ngoing to use them. The better design you pick, the more reusability\nyou can achieve.`),mdx(\"h3\",null,\"Default dimensions\"),mdx(\"p\",null,\"By default \",mdx(\"inlineCode\",{parentName:\"p\"},\"Rocketstyle\"),` uses the following configuration as they\nshould cover the most usual cases:`),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`const dimensions = {\n  states: 'state',\n  sizes: 'size',\n  variants: 'variant',\n  multiple: {\n    propName: 'multiple',\n    multi: true,\n  },\n} as const\n`)),mdx(\"h2\",null,\"Configuration options\"),mdx(\"p\",null,`You can define as amny dimensions as you want. There are no limitations,\non the other hand having more than 3-5 dimensions can cause more hassle\nor overthinking in designing UI dimension states and performance\nissues as there is going to happen more calculations.`),mdx(\"h3\",null,\"Dimensions naming\"),mdx(\"p\",null,`As you can see from the default dimensions example, dimensions\nare defined as an object where value can be a `,mdx(\"inlineCode\",{parentName:\"p\"},\"string\"),\" or an \",mdx(\"inlineCode\",{parentName:\"p\"},\"object\"),`\ncontaining `,mdx(\"inlineCode\",{parentName:\"p\"},\"propName\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"multi\"),\" value.\"),mdx(\"p\",null,\"Dimensions \",mdx(\"inlineCode\",{parentName:\"p\"},\"keys\"),\" define how the chaining will look like, \",mdx(\"inlineCode\",{parentName:\"p\"},\"values\"),`\n(in case they are a type of `,mdx(\"inlineCode\",{parentName:\"p\"},\"string\"),\") or \",mdx(\"inlineCode\",{parentName:\"p\"},\"propName\"),` value defines\nhow the dimension will be accepted as a prop in your `,mdx(\"inlineCode\",{parentName:\"p\"},\"component\"),\".\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import rocketstyle from '@vitus-labs/rocketstyle'\nimport MyDefaultComponent from './somewhere'\n\nconst MyComponent = rocketstyle()({\n  dimensions: {\n    states: 's',\n    sizes: 'sz',\n    variants: 'variant',\n    multiple: {\n      propName: 'multiple',\n      multi: true,\n    },\n  },\n  useBooleans: true,\n})({\n  component: MyDefaultComponent,\n  name: '@myUiSystem/MyComponent',\n})\n// using \\`states\\` here, but \\`s\\` in prop\n.states({\n  primary: /* ... */,\n  secondary: /* ... */,\n})\n.sizes({\n  small: /* ... */,\n  medium: /* ... */,\n  large: /* ... */,\n})\n.multiple({\n  left: /* ... */,\n  top: /* ... */,\n})\n\nexport default () => (\n  <>\n    <MyComponent s='primary' sz=\"small\" multiple={['left', 'top']} />\n  </>\n)\n`)),mdx(\"h3\",null,\"Dimensions order\"),mdx(\"p\",null,\"First of all, the important is \",mdx(\"inlineCode\",{parentName:\"p\"},\"order\"),` of the dimensions.\nThey are combined and put together from the `,mdx(\"inlineCode\",{parentName:\"p\"},\"first\"),` defined\nto the `,mdx(\"inlineCode\",{parentName:\"p\"},\"last\"),\" defined dimension.\"),mdx(\"p\",null,`From the default dimensions, it would be following: First will\nbe applied `,mdx(\"inlineCode\",{parentName:\"p\"},\"state\"),\" styles, then \",mdx(\"inlineCode\",{parentName:\"p\"},\"size\"),\" \\u2192 \",mdx(\"inlineCode\",{parentName:\"p\"},\"variant\"),` and finally\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"multiple\"),\".\"),mdx(\"p\",null,\"Therefore, you can define, for example, \",mdx(\"inlineCode\",{parentName:\"p\"},\"states\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"sizes\"),` and for\nsome specific cases you can override them in other dimensions like\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"variant\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"multiple\"),\".\"),mdx(\"h3\",null,\"Single vs. multi dimensions\"),mdx(\"p\",null,\"It's up to you if you define a \",mdx(\"inlineCode\",{parentName:\"p\"},\"dimension\"),\" as \",mdx(\"inlineCode\",{parentName:\"p\"},\"single\"),` value or\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"multi\"),\" value. The difference between them is that \",mdx(\"inlineCode\",{parentName:\"p\"},\"single\"),` value\ncan accept only one value as a string (or only latest boolean prop\nwill be picked). When using `,mdx(\"inlineCode\",{parentName:\"p\"},\"multi\"),`, props must be passed as an array\n(or all boolean props will accepted and applied).`),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import rocketstyle from '@vitus-labs/rocketstyle'\nimport MyDefaultComponent from './somewhere'\n\nconst MyComponent = rocketstyle()({\n  dimensions: {\n    states: 'state',\n    sizes: 'size',\n    variants: 'variant',\n    multiple: {\n      propName: 'multiple',\n      multi: true,\n    },\n  },\n  useBooleans: true,\n})({\n  component: MyDefaultComponent,\n  name: '@myUiSystem/MyComponent',\n})\n.states({\n  primary: /* ... */,\n  secondary: /* ... */,\n})\n.multiple({\n  left: /* ... */,\n  top: /* ... */,\n})\n\nexport default () => (\n  <>\n    <MyComponent state='primary' multiple={['left', 'top']} />\n\n    /*\n      when useBooleans is enabled,\n      dimensions will be applied as follows:\n      state='secondary'\n      multiple={['left', 'top']}\n    */\n    <MyComponent primary secondary left top />\n  </>\n)\n`)),mdx(\"h3\",null,\"Use booleans\"),mdx(\"p\",null,\"Rocketstyle allows you to pick whether you prefer to use \",mdx(\"inlineCode\",{parentName:\"p\"},\"boolean\"),`\nprops or `,mdx(\"inlineCode\",{parentName:\"p\"},\"key\"),\" props by using configuration property \",mdx(\"inlineCode\",{parentName:\"p\"},\"useBooleans\"),`.\nBy default it's set to `,mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\".\"),mdx(\"p\",null,\"It is definitely up to you, what you prefer. When enabled \",mdx(\"inlineCode\",{parentName:\"p\"},\"booleans\"),`,\nyou can still use `,mdx(\"inlineCode\",{parentName:\"p\"},\"key\"),` props. They are still supported even as\nthe option for overriding all the boolean props. For example:`),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`export default () => (\n  <>\n    /* booleans are ignored, result will be state=\"primary\" */\n    <MyComponent primary state=\"primary\" secondary />\n  </>\n)\n`)),mdx(\"p\",null,\"For bigger codebases may be more handy using just \",mdx(\"inlineCode\",{parentName:\"p\"},\"key\"),` props only.\nFor smaller projects could be convenient using `,mdx(\"inlineCode\",{parentName:\"p\"},\"boolean\"),\" props as well.\"),mdx(\"h2\",null,\"Define dimensions\"),mdx(\"p\",null,\"For example, for basic elements like \",mdx(\"inlineCode\",{parentName:\"p\"},\"Button\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"Link\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"Badge\"),` etc, may be convenient\nusing the default dimensions. For `,mdx(\"inlineCode\",{parentName:\"p\"},\"List\"),` may be much mor convenient define different\ndimensions, for example, `,mdx(\"inlineCode\",{parentName:\"p\"},\"gap\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"indent\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"gapY\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"gapX\"),\" etc.\"),mdx(\"p\",null,\"Therefore, you may define them as following:\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import rocketstyle from '@vitus-labs/rocketstyle'\nimport MyDefaultComponent from './somewhere'\n\nconst MyComponent = rocketstyle()({\n  dimensions: {\n    gap: 'gap',\n    gapX: 'gapX',\n    gapY: 'gapY',\n  } as const,\n  useBooleans: false,\n})({\n  component: MyDefaultComponent,\n  name: '@myUiSystem/MyComponent',\n})\n`)),mdx(\"p\",null,\"By doing so, you may specify \",mdx(\"inlineCode\",{parentName:\"p\"},\"gap\"),` property first and override\nby `,mdx(\"inlineCode\",{parentName:\"p\"},\"gapX\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"gapY\"),\" lately as it will be applied on top of \",mdx(\"inlineCode\",{parentName:\"p\"},\"gap\"),`\nstyling specification.`),mdx(\"p\",null,`And, as you may see, it also helps you keep spacing in lists coherent\n(or dimensions in general).`))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}