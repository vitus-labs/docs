{"pageProps":{"meta":{"name":"Rocketstyle \\ Pseudo State","title":"","description":""},"menu":[{"title":"Getting started","slug":"/docs/ui-system/rocketstyle/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/rocketstyle/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/rocketstyle/getting-started#installation"},{"title":"Getting started","anchor":"/docs/ui-system/rocketstyle/getting-started#getting-started"},{"title":"Create your first component","anchor":"/docs/ui-system/rocketstyle/getting-started#create-your-first-component"},{"title":"Reusability","anchor":"/docs/ui-system/rocketstyle/getting-started#reusability"},{"title":"Responsive styling","anchor":"/docs/ui-system/rocketstyle/getting-started#responsive-styling"},{"title":"Light / dark mode","anchor":"/docs/ui-system/rocketstyle/getting-started#light-/-dark-mode"},{"title":"Extend component","anchor":"/docs/ui-system/rocketstyle/getting-started#extend-component"}]},{"title":"Initialization","slug":"/docs/ui-system/rocketstyle/initialization","submenu":[{"title":"Bootstrap your rocket component","anchor":"/docs/ui-system/rocketstyle/initialization#bootstrap-your-rocket-component"},{"title":"Defining styling dimensions","anchor":"/docs/ui-system/rocketstyle/initialization#defining-styling-dimensions"},{"title":"Defining valid CSS styles","anchor":"/docs/ui-system/rocketstyle/initialization#defining-valid-css-styles"}]},{"title":"Attributes","slug":"/docs/ui-system/rocketstyle/attributes","submenu":[{"title":"Attrs as a plain object","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-plain-object"},{"title":"Attrs as a callback","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-callback"}]},{"title":"Theme","slug":"/docs/ui-system/rocketstyle/theme","submenu":[{"title":"Theme as a plain object","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-plain-object"},{"title":"Theme as a callback","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-callback"}]},{"title":"Compose","slug":"/docs/ui-system/rocketstyle/compose","submenu":[{"title":"An example of using compose","anchor":"/docs/ui-system/rocketstyle/compose#an-example-of-using-compose"}]},{"title":"Pseudo State","slug":"/docs/ui-system/rocketstyle/pseudo-state","submenu":[{"title":"Pseudo component properties","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-component-properties"},{"title":"Pseudo via context","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-via-context"},{"title":"Accessing props in styles","anchor":"/docs/ui-system/rocketstyle/pseudo-state#accessing-props-in-styles"}]},{"title":"Dimensions","slug":"/docs/ui-system/rocketstyle/dimensions","submenu":[{"title":"What are dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#what-are-dimensions"},{"title":"Configuration options","anchor":"/docs/ui-system/rocketstyle/dimensions#configuration-options"},{"title":"Define dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#define-dimensions"}]}],"content":{"compiledSource":"var c=Object.defineProperty,m=Object.defineProperties;var C=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var r=(e,n,o)=>n in e?c(e,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[n]=o,t=(e,n)=>{for(var o in n||(n={}))s.call(n,o)&&r(e,o,n[o]);if(a)for(var o of a(n))p.call(n,o)&&r(e,o,n[o]);return e},l=(e,n)=>m(e,C(n));var d=(e,n)=>{var o={};for(var i in e)s.call(e,i)&&n.indexOf(i)<0&&(o[i]=e[i]);if(e!=null&&a)for(var i of a(e))n.indexOf(i)<0&&p.call(e,i)&&(o[i]=e[i]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var i=o,{components:e}=i,n=d(i,[\"components\"]);return mdx(MDXLayout,l(t(t({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Pseudo State\"),mdx(\"p\",null,\"Rocketstyle has built-in support for pseudo states like \",mdx(\"inlineCode\",{parentName:\"p\"},\"hover\"),`,\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"focus\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"pressed\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"active\"),`. All of them can be even passed\nas boolean props to rocket component and passed via context to your\nchildren components.`),mdx(\"p\",null,\"This may allow you to eliminate using \",mdx(\"inlineCode\",{parentName:\"p\"},\"CSS\"),` selectors and overriding css\nstyles based on parent component current state and build independent logic\nfor each component separately.`),mdx(\"h2\",null,\"Pseudo component properties\"),mdx(\"p\",null,\"As mentioned above, you can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"hover\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"focus\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"pressed\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"active\"),`\nboolean props.`),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\n\nexport default () => (\n  <>\n    <RocketComponent hover />\n    <RocketComponent focus />\n    <RocketComponent pressed />\n    <RocketComponent active />\n  </>\n)\n`)),mdx(\"p\",null,`This will force the component to have one of the pseudo states.\nYou can pass all of them, but it will have styles based on the\npriorities you configure in `,mdx(\"inlineCode\",{parentName:\"p\"},\"styles\"),\" chaining callback.\"),mdx(\"h3\",null,\"Hover\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"hover\"),\" state is triggered on \",mdx(\"inlineCode\",{parentName:\"p\"},\"onMouseEnter\"),\" event and cancelled on \",mdx(\"inlineCode\",{parentName:\"p\"},\"onMouseLeave\")),mdx(\"h3\",null,\"Focus\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"focus\"),\" state is triggered on \",mdx(\"inlineCode\",{parentName:\"p\"},\"onFocus\"),\" event and cancelled on \",mdx(\"inlineCode\",{parentName:\"p\"},\"onBlur\")),mdx(\"h3\",null,\"Pressed\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"pressed\"),\" state is triggered on \",mdx(\"inlineCode\",{parentName:\"p\"},\"onMouseDown\"),\" event and cancelled on \",mdx(\"inlineCode\",{parentName:\"p\"},\"onMouseUp\"),`.\nThis is a kind of replacement for CSS `,mdx(\"inlineCode\",{parentName:\"p\"},\":active\"),` selector. But when building\nweb applications we commonly use `,mdx(\"inlineCode\",{parentName:\"p\"},\"active\"),` for routing etc. there fore the different\nnaming.`),mdx(\"h3\",null,\"Active\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"active\"),` has no triggers, it can be achieved only via passing a prop. As mentioned\nusing `,mdx(\"inlineCode\",{parentName:\"p\"},\"active\"),\" is a common pattern to use for \",mdx(\"inlineCode\",{parentName:\"p\"},\"routing\"),\" and highlight \",mdx(\"inlineCode\",{parentName:\"p\"},\"active\"),` links\nan so on.`),mdx(\"h2\",null,\"Pseudo via context\"),mdx(\"p\",null,`You can pass pseudo states via context from parent to children\ncomponent(s) via enabling `,mdx(\"inlineCode\",{parentName:\"p\"},\"provider\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"consumer\"),` options\nin `,mdx(\"inlineCode\",{parentName:\"p\"},\"config\"),\" callback.\"),mdx(\"p\",null,\"When enabling \",mdx(\"inlineCode\",{parentName:\"p\"},\"provider\"),\" it will pass not only \",mdx(\"inlineCode\",{parentName:\"p\"},\"pseudo\"),` but also\nother dimensions states as well.`),mdx(\"p\",null,\"When enabling \",mdx(\"inlineCode\",{parentName:\"p\"},\"consumer\"),\" you can specify, what states \",mdx(\"inlineCode\",{parentName:\"p\"},\"child\"),` component\nshould have based on parent states. Therefore you can simply define\nthe logic of how the child component should behave based on all\navailable states from parent component. Event it is just simply\nforwarding `,mdx(\"inlineCode\",{parentName:\"p\"},\"pseudo\"),\" states or defining that when \",mdx(\"inlineCode\",{parentName:\"p\"},\"parent\"),\" has \",mdx(\"inlineCode\",{parentName:\"p\"},\"hover\"),`\nchild will change to `,mdx(\"inlineCode\",{parentName:\"p\"},\"secondary\"),\" state.\"),mdx(\"p\",null,`This can help you defining each component states separately and\ncombine the logic and styles in modules independently without\noverriding css rules.`),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\n\nconst Parent = RocketComponent.config({\n  provider: true,\n})\n\nconst ChildA = RocketComponent.config({\n  consumer: (ctx) =>\n    ctx(({ pseudo, state, size, variant }) => ({\n      pseudo,\n      state,\n      size,\n      variant,\n    })),\n})\n\nconst ChildB = RocketComponent.config({\n  consumer: (ctx) =>\n    ctx(({ pseudo }) => ({\n      pseudo,\n    })),\n})\n\nexport default () => (\n  <Parent>\n    <ChildA />\n    <ChildB />\n  </Parent>\n)\n`)),mdx(\"h3\",null,\"Combining Provider and Consumer\"),mdx(\"p\",null,\"You can even use \",mdx(\"inlineCode\",{parentName:\"p\"},\"provider\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"consumer\"),` at the same time in components.\nWhen you have a component like this, it will take as a `,mdx(\"inlineCode\",{parentName:\"p\"},\"consumer\"),` states from\nits parent, transforms `,mdx(\"inlineCode\",{parentName:\"p\"},\"consumer\"),` logic to its own internal state and will\npass its own states to its `,mdx(\"inlineCode\",{parentName:\"p\"},\"children\"),`. Therefore you can even create more\ncomplicated a tree of components.`),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\n\nconst Parent = RocketComponent.config({\n  provider: true,\n})\n\nconst ChildA = RocketComponent.config({\n  provider: true,\n  consumer: (ctx) =>\n    ctx(({ pseudo, state, size, variant }) => ({\n      pseudo,\n      state,\n      size,\n      variant,\n    })),\n})\n\nconst ChildB = RocketComponent.config({\n  consumer: (ctx) =>\n    ctx(({ pseudo }) => ({\n      pseudo,\n    })),\n})\n\nexport default () => (\n  <Parent>\n    <ChildA>\n      <ChildB />\n    <ChildA>\n  </Parent>\n)\n`)),mdx(\"h2\",null,\"Accessing props in styles\"),mdx(\"p\",null,\"Final generated styles are passed under \",mdx(\"inlineCode\",{parentName:\"p\"},\"$rocketstyle\"),` prop, therefore\npseudo states and dimension states are passed under `,mdx(\"inlineCode\",{parentName:\"p\"},\"$rocketstate\"),\" prop.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import rocketstyle from '@vitus-labs/rocketstyle'\nimport MyDefaultComponent from './somewhere'\n\nconst MyComponent = rocketstyle()()({\n  component: MyDefaultComponent,\n  name: '@myUiSystem/MyComponent',\n}).styles(\n  (css) => css\\`\n    \\${({ $rocketstyle, $rocketstate }) => css\\`\n      /*\n        $rocketstyle\n          -> calcuated style properties fefined in theme\n          and dimension callbacks\n\n        $rocketstate\n          -> pseudo props hover, focus, pressed, active\n          -> migh help you build logic of you styles priorities\n      */\n    \\`};\n  \\`\n)\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}