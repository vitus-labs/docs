{"pageProps":{"meta":{"name":"Rocketstyle \\ Theme","title":"","description":""},"menu":[{"title":"Getting started","slug":"/docs/ui-system/rocketstyle/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/rocketstyle/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/rocketstyle/getting-started#installation"},{"title":"Getting started","anchor":"/docs/ui-system/rocketstyle/getting-started#getting-started"},{"title":"Create your first component","anchor":"/docs/ui-system/rocketstyle/getting-started#create-your-first-component"},{"title":"Reusability","anchor":"/docs/ui-system/rocketstyle/getting-started#reusability"},{"title":"Responsive styling","anchor":"/docs/ui-system/rocketstyle/getting-started#responsive-styling"},{"title":"Light / dark mode","anchor":"/docs/ui-system/rocketstyle/getting-started#light-/-dark-mode"},{"title":"Extend component","anchor":"/docs/ui-system/rocketstyle/getting-started#extend-component"}]},{"title":"Initialization","slug":"/docs/ui-system/rocketstyle/initialization","submenu":[{"title":"Bootstrap your rocket component","anchor":"/docs/ui-system/rocketstyle/initialization#bootstrap-your-rocket-component"},{"title":"Defining styling dimensions","anchor":"/docs/ui-system/rocketstyle/initialization#defining-styling-dimensions"},{"title":"Defining valid CSS styles","anchor":"/docs/ui-system/rocketstyle/initialization#defining-valid-css-styles"}]},{"title":"Attributes","slug":"/docs/ui-system/rocketstyle/attributes","submenu":[{"title":"Attrs as a plain object","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-plain-object"},{"title":"Attrs as a callback","anchor":"/docs/ui-system/rocketstyle/attributes#attrs-as-a-callback"}]},{"title":"Theme","slug":"/docs/ui-system/rocketstyle/theme","submenu":[{"title":"Theme as a plain object","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-plain-object"},{"title":"Theme as a callback","anchor":"/docs/ui-system/rocketstyle/theme#theme-as-a-callback"}]},{"title":"Compose","slug":"/docs/ui-system/rocketstyle/compose","submenu":[{"title":"An example of using compose","anchor":"/docs/ui-system/rocketstyle/compose#an-example-of-using-compose"}]},{"title":"Pseudo State","slug":"/docs/ui-system/rocketstyle/pseudo-state","submenu":[{"title":"Pseudo component properties","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-component-properties"},{"title":"Pseudo via context","anchor":"/docs/ui-system/rocketstyle/pseudo-state#pseudo-via-context"},{"title":"Accessing props in styles","anchor":"/docs/ui-system/rocketstyle/pseudo-state#accessing-props-in-styles"}]},{"title":"Dimensions","slug":"/docs/ui-system/rocketstyle/dimensions","submenu":[{"title":"What are dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#what-are-dimensions"},{"title":"Configuration options","anchor":"/docs/ui-system/rocketstyle/dimensions#configuration-options"},{"title":"Define dimensions","anchor":"/docs/ui-system/rocketstyle/dimensions#define-dimensions"}]}],"content":{"compiledSource":"var d=Object.defineProperty,c=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(e,n,o)=>n in e?d(e,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[n]=o,i=(e,n)=>{for(var o in n||(n={}))l.call(n,o)&&s(e,o,n[o]);if(a)for(var o of a(n))r.call(n,o)&&s(e,o,n[o]);return e},p=(e,n)=>c(e,h(n));var m=(e,n)=>{var o={};for(var t in e)l.call(e,t)&&n.indexOf(t)<0&&(o[t]=e[t]);if(e!=null&&a)for(var t of a(e))n.indexOf(t)<0&&r.call(e,t)&&(o[t]=e[t]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var t=o,{components:e}=t,n=m(t,[\"components\"]);return mdx(MDXLayout,p(i(i({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Theme\"),mdx(\"p\",null,\"To define default theme, there is a \",mdx(\"inlineCode\",{parentName:\"p\"},\"theme\"),` option to do so,\nor even allows you to override it later the way you need.\nBy default, there is a callback called `,mdx(\"inlineCode\",{parentName:\"p\"},\"theme\"),` where you can\nconfigure default component theme.`),mdx(\"p\",null,\"For defining default \",mdx(\"inlineCode\",{parentName:\"p\"},\"theme\"),\" there are two possible choices:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"use plain \",mdx(\"inlineCode\",{parentName:\"li\"},\"object\"),\", or\"),mdx(\"li\",{parentName:\"ol\"},\"use a \",mdx(\"inlineCode\",{parentName:\"li\"},\"callback\"),\".\")),mdx(\"p\",null,\"Theme is being used as the \",mdx(\"strong\",{parentName:\"p\"},\"base\"),` for visual identity of your\ncomponent. Which can be even extended by `,mdx(\"strong\",{parentName:\"p\"},\"dimension(s)\"),` themes like\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"states\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"sizes\"),` etc. to separate the logic of component final\nvisualisation.`),mdx(\"p\",null,`Theme properties depend on your styles definition. Therefore they\ndo not follow any strict naming policy. All theme properties are\nmerged into one `,mdx(\"inlineCode\",{parentName:\"p\"},\"object\"),\" which is passed to \",mdx(\"inlineCode\",{parentName:\"p\"},\"styled\"),` component\nunder `,mdx(\"strong\",{parentName:\"p\"},\"$rocketstyle\"),\" key name.\"),mdx(\"h2\",null,\"Theme as a plain object\"),mdx(\"p\",null,\"You can define default \",mdx(\"inlineCode\",{parentName:\"p\"},\"theme\"),\" by using plain object\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\n\nconst Component = RocketComponent.theme({\n  fontSize: 'something here',\n  color: 'something else',\n  border: false,\n  someOtherPropertyValue: 'something here',\n  // ...etc.\n})\n`)),mdx(\"h2\",null,\"Theme as a callback\"),mdx(\"p\",null,\"When using the callback option, you can access \",mdx(\"inlineCode\",{parentName:\"p\"},\"theme\"),` passed\nvia `,mdx(\"inlineCode\",{parentName:\"p\"},\"ThemeProvider\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"mode\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"css\"),` functions to build scalable\nUI. You can do so like following:`),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"editor=false live=false\",editor:\"false\",live:\"false\"}),`import RocketComponent from './ourPath'\n\nconst Component = RocketComponent.theme((theme, mode, css) => ({\n  fontFamily: t.fontFamily.base,\n  color: mode(theme.color.light, theme.color.dark),\n  extendCss: css\\`\n    font-size: \\${t.fontSize.medium};\n  \\`,\n  anotherProperty: mode('white', 'black'),\n  // ...etc.\n}))\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}