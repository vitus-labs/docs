{"pageProps":{"meta":{"title":"Elements / List","description":""},"menu":[{"title":"Getting started","slug":"/docs/ui-system/elements/getting-started","submenu":[{"title":"Motivation","anchor":"/docs/ui-system/elements/getting-started#motivation"},{"title":"Installation","anchor":"/docs/ui-system/elements/getting-started#installation"},{"title":"Dependencies","anchor":"/docs/ui-system/elements/getting-started#dependencies"},{"title":"Available components","anchor":"/docs/ui-system/elements/getting-started#available-components"}]},{"title":"Element","slug":"/docs/ui-system/elements/element","submenu":[{"title":"Examples","anchor":"/docs/ui-system/elements/element#examples"},{"title":"Render children","anchor":"/docs/ui-system/elements/element#render-children"},{"title":"Before & After content","anchor":"/docs/ui-system/elements/element#before-&-after-content"},{"title":"Vertical & Horizontal alignment","anchor":"/docs/ui-system/elements/element#vertical-&-horizontal-alignment"},{"title":"Horizontal element","anchor":"/docs/ui-system/elements/element#horizontal-element"},{"title":"Vertical element","anchor":"/docs/ui-system/elements/element#vertical-element"},{"title":"Props","anchor":"/docs/ui-system/elements/element#props"}]},{"title":"List","slug":"/docs/ui-system/elements/list","submenu":[{"title":"Example","anchor":"/docs/ui-system/elements/list#example"},{"title":"Render Items","anchor":"/docs/ui-system/elements/list#render-items"},{"title":"Data properties","anchor":"/docs/ui-system/elements/list#data-properties"},{"title":"Item key value","anchor":"/docs/ui-system/elements/list#item-key-value"},{"title":"Custom item component","anchor":"/docs/ui-system/elements/list#custom-item-component"},{"title":"Custom item props","anchor":"/docs/ui-system/elements/list#custom-item-props"},{"title":"Extend props","anchor":"/docs/ui-system/elements/list#extend-props"},{"title":"Wrapping items","anchor":"/docs/ui-system/elements/list#wrapping-items"},{"title":"Extend Wrapper props","anchor":"/docs/ui-system/elements/list#extend-wrapper-props"},{"title":"List properties","anchor":"/docs/ui-system/elements/list#list-properties"}]},{"title":"Text","slug":"/docs/ui-system/elements/text","submenu":[{"title":"Examples","anchor":"/docs/ui-system/elements/text#examples"},{"title":"Using Text component","anchor":"/docs/ui-system/elements/text#using-text-component"},{"title":"Text types","anchor":"/docs/ui-system/elements/text#text-types"},{"title":"Paragraph","anchor":"/docs/ui-system/elements/text#paragraph"},{"title":"Props","anchor":"/docs/ui-system/elements/text#props"}]},{"title":"Overlay","slug":"/docs/ui-system/elements/overlay","submenu":[{"title":"Using Overlay","anchor":"/docs/ui-system/elements/overlay#using-overlay"},{"title":"Overlay Properties","anchor":"/docs/ui-system/elements/overlay#overlay-properties"}]},{"title":"Portal","slug":"/docs/ui-system/elements/portal","submenu":[{"title":"Examples","anchor":"/docs/ui-system/elements/portal#examples"},{"title":"Properties","anchor":"/docs/ui-system/elements/portal#properties"}]}],"content":{"compiledSource":"var d=Object.defineProperty,c=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var m=(t,n,a)=>n in t?d(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a,e=(t,n)=>{for(var a in n||(n={}))o.call(n,a)&&m(t,a,n[a]);if(s)for(var a of s(n))p.call(n,a)&&m(t,a,n[a]);return t},l=(t,n)=>c(t,g(n));var i=(t,n)=>{var a={};for(var r in t)o.call(t,r)&&n.indexOf(r)<0&&(a[r]=t[r]);if(t!=null&&s)for(var r of s(t))n.indexOf(r)<0&&p.call(t,r)&&(a[r]=t[r]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var r=a,{components:t}=r,n=i(r,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),n),{components:t,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"List\"),mdx(\"p\",null,`List is a basic component to render simple lists. It could help you\navoiding repeatable patterns and using `,mdx(\"strong\",{parentName:\"p\"},\"map\"),\" function repeatedly.\"),mdx(\"p\",null,`Secondly, it migh help you keeping components more structured and\norganized.`),mdx(\"h2\",null,\"Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { name: 'John', surname: 'Doe' },\n  { name: 'Sam', surname: 'Johnson' },\n]\n\nconst component = ({ name, surname }) => (\n  <Element block label={name + ' ' + surname} css={styles} />\n)\n\nconst Users = () => (\n  <List\n    rootElement\n    block\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    data={data}\n    component={component}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h2\",null,\"Render Items\"),mdx(\"p\",null,\"There are several ways of rendering children within \",mdx(\"strong\",{parentName:\"p\"},\"List\"),` component.\nSo let's take a look at them.`),mdx(\"h3\",null,\"Render children\"),mdx(\"p\",null,\"First of all, you can use \",mdx(\"strong\",{parentName:\"p\"},\"List\"),` as a wrapper for\nyour components and just pass children normally like you do in React.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst User = ({ name, surname }) => (\n  <Element label={name + ' ' + surname} css={styles} />\n)\n\nconst Users = () => (\n  <List rootElement vertical>\n    <User name=\"John\" surname=\"Doe\" />\n    <User name=\"Sam\" surname=\"Johnson\" />\n  </List>\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h3\",null,\"Render from an array\"),mdx(\"p\",null,\"Another way of rendering children is passing a props \",mdx(\"strong\",{parentName:\"p\"},\"data\"),\" and \",mdx(\"strong\",{parentName:\"p\"},\"component\"),`\nto List component and it will iterate on the background and render list\nof elements.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { key: '1', name: 'John', surname: 'Doe' },\n  { key: '2', name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ name, surname }) => (\n  <Element label={name + ' ' + surname} css={styles} />\n)\n\nconst Users = () => <List rootElement vertical data={data} component={User} />\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h2\",null,\"Data properties\"),mdx(\"p\",null,\"Prop \",mdx(\"strong\",{parentName:\"p\"},\"data\"),\" must be of \",mdx(\"strong\",{parentName:\"p\"},\"Array\"),` type, but the items within array can\nbe of different types.`),mdx(\"h3\",null,\"Array of objects\"),mdx(\"p\",null,`Probably the most common case is to render array of objects as a list.\nThis can be simply done by following example:`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\n// using key is not required, List fallbacks to map index value\nconst data = [\n  { key: '1', name: 'John', surname: 'Doe' },\n  { key: '2', name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ name, surname }) => (\n  <Element label={name + ' ' + surname} css={styles} />\n)\n\nconst Users = () => <List rootElement vertical data={data} component={User} />\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h3\",null,\"Array of strings or numbers\"),mdx(\"p\",null,`Sometimes you just want to render list of items which accepts only one\nprop of type `,mdx(\"strong\",{parentName:\"p\"},\"string\"),\" or \",mdx(\"strong\",{parentName:\"p\"},\"number\"),`. In that case you can just\nsimply pass array of values as `,mdx(\"strong\",{parentName:\"p\"},\"data\"),\" prop. It also filters \",mdx(\"strong\",{parentName:\"p\"},\"null\"),`\nand `,mdx(\"strong\",{parentName:\"p\"},\"undefined\"),` values, therefore doesn't render empty elements\nwhich could lead to throwing errors.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = ['John Doe', 'Sam Johnson']\n\nconst User = ({ label }) => <Element label={label} css={styles} />\n\nconst Users = () => (\n  <List\n    rootElement\n    vertical\n    // each item will be passed as 'label' prop\n    valueName=\"label\"\n    data={data}\n    component={User}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"p\",null,\"As there is always need to add a \",mdx(\"strong\",{parentName:\"p\"},\"key\"),` when rendering elements\ndynamically, you don't have to worry about it. It will add\na `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://reactjs.org/docs/lists-and-keys.html\"}),\"key\"),` for you out\nof the box.`),mdx(\"h2\",null,\"Item key value\"),mdx(\"p\",null,\"By default, it will look for \",mdx(\"strong\",{parentName:\"p\"},\"key\"),\" \",\"\\u2192\",\" \",mdx(\"strong\",{parentName:\"p\"},\"id\"),\" \",\"\\u2192\",\" \",mdx(\"strong\",{parentName:\"p\"},\"itemId\"),` in\nyour item object within `,mdx(\"strong\",{parentName:\"p\"},\"data\"),` prop. In case there is no value from\nthose mentioned previously, it will fallback to `,mdx(\"strong\",{parentName:\"p\"},\"index\"),` value from map\nfunction.`),mdx(\"p\",null,\"Item key value can be customizable as well. You can pass \",mdx(\"strong\",{parentName:\"p\"},\"itemKey\"),`\nprop which can be either type of `,mdx(\"strong\",{parentName:\"p\"},\"string\"),\" or a \",mdx(\"strong\",{parentName:\"p\"},\"function\"),\".\"),mdx(\"p\",null,\"When passing a string value, \",mdx(\"strong\",{parentName:\"p\"},\"List\"),` will use it as a key name from\nitem object.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { userId: '1', name: 'John', surname: 'Doe' },\n  { userId: '2', name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ name, surname }) => (\n  <Element label={name + ' ' + surname} css={styles} />\n)\n\nconst Users = () => (\n  <List rootElement vertical itemKey=\"userId\" data={data} component={User} />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"p\",null,\"By passing a function value you can create a customized \",mdx(\"strong\",{parentName:\"p\"},\"key\"),` for each\nelement.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { userId: '1', name: 'John', surname: 'Doe' },\n  { userId: '2', name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ name, surname }) => (\n  <Element label={name + ' ' + surname} css={styles} />\n)\n\nconst Users = () => (\n  <List\n    rootElement\n    vertical\n    contentAlignX=\"block\"\n    itemKey={(itemProps, i) => itemProps.userId}\n    data={data}\n    component={User}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h2\",null,\"Custom item component\"),mdx(\"p\",null,`In that case, you want to render items but some of them need to be\nrender using different component, you may just want to add a\n`,mdx(\"strong\",{parentName:\"p\"},\"component\"),\" prop into you object data item.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst User = ({ name, surname }) => (\n  <Element label={name + ' ' + surname} css={styles} />\n)\n\nconst SpecialUser = ({ name, surname }) => (\n  <Element label={name + ' ' + surname + ' - Special user'} css={styles} />\n)\n\nconst data = [\n  { userId: '1', name: 'John', surname: 'Doe' },\n  // \\u2193\\u2193\\u2193 added component property\n  { userId: '2', name: 'Sam', surname: 'Johnson', component: SpecialUser },\n]\n\nconst Users = () => (\n  <List\n    rootElement\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    itemKey={(itemProps) => itemProps.userId}\n    data={data}\n    component={User}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h2\",null,\"Custom item props\"),mdx(\"p\",null,\"You can even \",mdx(\"strong\",{parentName:\"p\"},\"data\"),\" create dynamically by using \",mdx(\"strong\",{parentName:\"p\"},\"itemProps\"),` prop.\nThis prop can be either an object or a callback function which receives\nitem props.`),mdx(\"p\",null,`When using a callback function, you get the following arguments: (\n`,mdx(\"strong\",{parentName:\"p\"},\"item\"),\": item props from data array, \",mdx(\"strong\",{parentName:\"p\"},\"extendProps\"),\": \",mdx(\"a\",e({parentName:\"p\"},{href:\"#extend-props\"}),\"object\"),`\nof boolean values (`,mdx(\"strong\",{parentName:\"p\"},\"index\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"position\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"first\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"last\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"odd\"),\", \",mdx(\"strong\",{parentName:\"p\"},\"even\"),`)\nand expected to return an object.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { name: 'John', surname: 'Doe' },\n  { name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ userId, name, surname }) => (\n  <Element\n    label={'[ ' + userId + ' ] - ' + name + ' ' + surname}\n    css={styles}\n  />\n)\n\nconst Users = () => (\n  <List\n    rootElement\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    data={data}\n    component={User}\n    itemProps={(item, extendProps) => ({\n      // \\u2193\\u2193\\u2193 create your own props dynamically\n      userId: extendProps.position, // + '-' + extendProps.position\n    })}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h2\",null,\"Extend props\"),mdx(\"p\",null,`Another example of extending Item component props. You can, for example,\npass all `,mdx(\"strong\",{parentName:\"p\"},\"extendProps\"),` values and handle your component styles according\nto it.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { name: 'John', surname: 'Doe' },\n  { name: 'Sam', surname: 'Johnson' },\n]\n\nconst User = ({ name, surname, position, odd }) => (\n  <Element\n    label={'[ ' + position + ' ] - ' + name + ' ' + surname}\n    css={styles}\n    style={{\n      color: odd ? 'palevioletred' : 'papayawhip',\n      background: odd ? 'papayawhip' : 'palevioletred',\n    }}\n  />\n)\n\nconst Users = () => (\n  <List\n    rootElement\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    data={data}\n    component={User}\n    itemProps={(item, extendProps) => extendProps}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h2\",null,\"Wrapping items\"),mdx(\"p\",null,`If you would like to render a list of items but need to wrap each\nelement by another component, then, there is no need to create a new\ncomponent where you combine them together. You can just use\n`,mdx(\"strong\",{parentName:\"p\"},\"wrapComponent\"),` prop to add a wrapping component. For example, this\nmight be useful when you have a list of links but want to wrap them to\n`,mdx(\"strong\",{parentName:\"p\"},\"li\"),\" HTML tag to create a HTML valid list of links.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { name: 'John', surname: 'Doe' },\n  { name: 'Sam', surname: 'Johnson' },\n]\n\nconst Wrapper = (props) => <li {...props} />\n\nconst User = ({ name, surname }) => (\n  <Element label={name + ' ' + surname} css={styles} />\n)\n\nconst Users = () => (\n  <List\n    rootElement\n    tag=\"ul\"\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    data={data}\n    component={User}\n    wrapComponent={Wrapper}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h2\",null,\"Extend Wrapper props\"),mdx(\"p\",null,`Another example of extending Item component props. You can, for example,\npass all `,mdx(\"strong\",{parentName:\"p\"},\"extendProps\"),` values and handle your component styles according\nto it.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { Element, List } from '@vitus-labs/elements'\n\nconst styles = (css) => css\\`\n  \\${defaultCss};\n  padding: 8px;\n  margin: 4px;\n\\`\n\nconst data = [\n  { name: 'John', surname: 'Doe' },\n  { name: 'Sam', surname: 'Johnson' },\n]\n\nconst Wrapper = ({ position, children }) => (\n  <Element tag=\"li\" css={styles}>\n    [{position}] {children}\n  </Element>\n)\n\nconst User = ({ name, surname }) => <Element label={name + ' ' + surname} />\n\nconst Users = () => (\n  <List\n    rootElement\n    contentDirection=\"rows\"\n    contentAlignX=\"block\"\n    data={data}\n    component={User}\n    wrapComponent={Wrapper}\n    wrapProps={(item, extendProps) => extendProps}\n  />\n)\n\n// \\u2193\\u2193\\u2193 List \\u2193\\u2193\\u2193\nrender(<Users />)\n`)),mdx(\"h2\",null,\"List properties\"),mdx(\"p\",null,\"List accepts all \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/ui-system/elements/element\"}),\"Element properties\"),`\n(except `,mdx(\"inlineCode\",{parentName:\"p\"},\"label\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"content\"),\") and the following props.\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Name\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Type\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Default value\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"left\"}),\"Description\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"rootElement\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"boolean\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"false\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"Whether a root element should be rendered or the output should be just a type of React \",mdx(\"strong\",{parentName:\"td\"},\"Fragment\"))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"children\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"ReactNode\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"Children to List can be passed manually by using \",mdx(\"strong\",{parentName:\"td\"},\"children\"),\" prop.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"data\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"Array\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"An array of item values to be passed to item component\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"component\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"ComponentType\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"A component to be rendered per item\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"wrapComponent\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"ComponentType\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"A component to be used as a wrapper component for item component\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"valueName\"),mdx(\"td\",e({parentName:\"tr\"},{align:null})),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"Can be used when \",mdx(\"strong\",{parentName:\"td\"},\"data\"),\" consists of \",mdx(\"strong\",{parentName:\"td\"},\"strings\"),\" or \",mdx(\"strong\",{parentName:\"td\"},\"numbers\"),\" to name value being passed as a prop\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"itemKey\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"string\"),\" \",mdx(\"strong\",{parentName:\"td\"},\"callback\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"Prop for defining item key name / value if default behavior doesn't work out\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"itemProps\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"object\"),\" \",mdx(\"strong\",{parentName:\"td\"},\"callback\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"A custobizable hook for dynamically render props for each item\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"wrapProps\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"strong\",{parentName:\"td\"},\"object\"),\" \",mdx(\"strong\",{parentName:\"td\"},\"callback\")),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"})),mdx(\"td\",e({parentName:\"tr\"},{align:\"left\"}),\"A custobizable hook for dynamically render props for each item\")))))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}